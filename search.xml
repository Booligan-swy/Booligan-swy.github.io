<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>并查集</title>
    <url>/2021/04/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<h2 id="并查集的定义"><a href="#并查集的定义" class="headerlink" title="并查集的定义"></a>并查集的定义</h2><p><font face="宋体">并查集是一种树型的数据结构，并可以高效的执行下面两种操作：</font></p>
<ul>
<li><font face="宋体">1. 查询两个元素是否属于同一分组；</font></li>
<li><font face="宋体">2. 合并两个元素所在的分组。</font><span id="more"></span>
<h2 id="并查集的结构特点"><a href="#并查集的结构特点" class="headerlink" title="并查集的结构特点"></a>并查集的结构特点</h2><font face="宋体">并查集是一种树型结构，但这棵树跟之前理解的二叉树、红黑树以及B树等不一样，这种树的要求比较简单。</font></li>
<li><font face="宋体"> 每一个元素都有唯一的对应的分组标识（一个结点）；</font></li>
<li><font face="宋体">每一组数据中的多个元素都在同一棵树中；</font></li>
<li><font face="宋体"> 一个组中对应的树跟另外组所对应的树没有任何联系；</font></li>
<li><font face="宋体">元素在树中并没有子父级关系的硬性要求。</font></li>
</ul>
<h2 id="并查集的代码实现与测试结果"><a href="#并查集的代码实现与测试结果" class="headerlink" title="并查集的代码实现与测试结果"></a>并查集的代码实现与测试结果</h2><pre><code>/*
并查集的实现
*/

#include&lt;iostream&gt;

using namespace std;

class UF &#123;
private:
    int* eleAndGroup;
    int count; //记录分组的个数
public:
    UF(int N) &#123;
        this-&gt;count = N;
        this-&gt;eleAndGroup = new int[N];
        //初始化eleAndGroup中每个索引是并查集中的每个元素，而eleAndGroup中的每个元素是并查集的分组情况
        for (int i = 0; i &lt; N; i++) &#123;
            eleAndGroup[i] = i;
        &#125;
    &#125;

    ~UF() &#123;
        delete eleAndGroup;
    &#125;
    //获取当前并查集中的数据有多少个分组
    int length() &#123;
        return count;
    &#125;

    //获取元素p所在的分组标识
    int find(int p) &#123;
        return eleAndGroup[p];
    &#125;

    //判断并查集中的元素p和q是否在同一分组中
    bool connected(int p, int q) &#123;
        return find(p) == find(q);
    &#125;
    //合并p所在的分组和q元素所在的分组
    void unionGroup(int p, int q) &#123;
        if (connected(p, q)) &#123;
            return;
        &#125;

        //找到p所在的分组标识
        int pGroup = eleAndGroup[p];

        //找到q所在的分组标识
        int qGroup = eleAndGroup[q];

        //合并组:将p所在的分组所有元素都改为qGroup
        for (int i = 0; i &lt; sizeof(eleAndGroup) / sizeof(eleAndGroup[0]); i++) &#123;
            if (eleAndGroup[i] == pGroup) &#123;
                eleAndGroup[i] = qGroup;
            &#125;
        &#125;
        //分组个数-1
        this-&gt;count--;
    &#125;
&#125;;

int main() &#123;
    UF uf(12);
    while (true) &#123;
        int q, p;
        cout &lt;&lt; &quot;Please input two elements:&quot;;
        cin &gt;&gt; p &gt;&gt; q;

        if (uf.connected(p, q)) &#123;
            cout &lt;&lt; &quot;两个元素在同一个分组！&quot; &lt;&lt; endl;
        &#125;
        uf.unionGroup(p, q);
        cout &lt;&lt; &quot;分组个数:&quot; &lt;&lt; uf.length() &lt;&lt; endl;
        
        if(uf.length() == 1)&#123;
            break;
        &#125;
    &#125;
    return 0;
&#125;
</code></pre>
<h4 id="运行的结果："><a href="#运行的结果：" class="headerlink" title="运行的结果："></a>运行的结果：</h4><p><img src="/2021/04/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86/1617851508746.png" alt="Alt text"><br><font face="宋体">可以清楚的看到，在实现unionGroup时候，要想让所有的数据都在一个分组，则需要调用N-1次unionGroup方法才行，而每一次的unionGroup方法里面又有一个for循环来遍历所有的元素，因此整个算法的时间复杂度是O(N^2)，如果要解决大规模问题显然是不合适的。</font></p>
<h4 id="改进的find和unionGroup方法"><a href="#改进的find和unionGroup方法" class="headerlink" title="改进的find和unionGroup方法"></a>改进的find和unionGroup方法</h4><p><font face="宋体">为了提升unionGroup的性能，需要重新设计find方法和union方法。</font></p>
<ul>
<li><font face="宋体">仍然让eleAndGroup数组的索引作为某个结点的元素；</font></li>
<li><font face="宋体">eleAndGroup中的值不再是当前结点所在分组的标识，而是该结点的父结点。</font></li>
</ul>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><pre><code>/*
并查集的实现
*/

#include&lt;iostream&gt;

using namespace std;

class UF &#123;
private:
    int* eleAndGroup;
    int count; //记录分组的个数
public:
    UF(int N) &#123;
        this-&gt;count = N;
        this-&gt;eleAndGroup = new int[N];
        //初始化eleAndGroup中每个索引是并查集中的每个元素，而eleAndGroup中的每个元素是并查集的分组情况
        for (int i = 0; i &lt; N; i++) &#123;
            eleAndGroup[i] = i;
        &#125;
    &#125;

    ~UF() &#123;
        delete eleAndGroup;
    &#125;
    //获取当前并查集中的数据有多少个分组
    int length() &#123;
        return count;
    &#125;

    //获取元素p所在的分组标识
    int find(int p) &#123;
        //return eleAndGroup[p];

        while (true) &#123;
            if (p == eleAndGroup[p]) &#123;
                return p;
            &#125;
            p = eleAndGroup[p];
        &#125;
    &#125;

    //判断并查集中的元素p和q是否在同一分组中
    bool connected(int p, int q) &#123;
        return find(p) == find(q);
    &#125;
    //合并p所在的分组和q元素所在的分组
    void unionGroup(int p, int q) &#123;
        //if (connected(p, q)) &#123;
        //    return;
        //&#125;

        ////找到p所在的分组标识
        //int pGroup = eleAndGroup[p];

        ////找到q所在的分组标识
        //int qGroup = eleAndGroup[q];

        ////合并组:将p所在的分组所有元素都改为qGroup
        //for (int i = 0; i &lt; sizeof(eleAndGroup) / sizeof(eleAndGroup[0]); i++) &#123;
        //    if (eleAndGroup[i] == pGroup) &#123;
        //        eleAndGroup[i] = qGroup;
        //    &#125;
        //&#125;
        ////分组个数-1
        //this-&gt;count--;

        int pRoot = find(p);
        int qRoot = find(q);

        if (pRoot == qRoot) &#123;
            return;
        &#125;

        //让p所在的树的根结点指向q所在树的根结点
        eleAndGroup[pRoot] = qRoot;

        this-&gt;count--;
    &#125;
&#125;;
</code></pre>
<p><font face="宋体">目前优化后的方法还是存在一个问题，要让并查集中所有的数据连通，任然需要调用N-1次unionGroup方法。虽然unionGroup方法的时间复杂度变为了O(N)，但是修改的find方法在最坏的情况下的时间复杂度是O(N)。我们知道，当树的高度越低，查找的速度越快，因此为了避免find方法的最坏情况发生，考虑使用路径压缩来降低树的高度。</font></p>
<h4 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h4><p><font face="宋体">其实很简单，我们在处理两棵树合并的时候是直接将某棵树的根结点指向另一棵树的叶子结点，这就导致树的高度增加。为了避免这种情况，需要在合并两棵树的时候考察一下那棵树比较高，然后把较低的那棵树的根结点指向较高树的根结点即可。<br></font></p>
<h5 id="代码实现如下："><a href="#代码实现如下：" class="headerlink" title="代码实现如下："></a>代码实现如下：</h5><pre><code>/*
并查集的实现
*/

#include&lt;iostream&gt;

using namespace std;

class UF_Tree_Weighted &#123;
private:
    int* eleAndGroup; //记录结点元素和该元素所在的分组标识
    int count; //记录分组的个数
    int* sz; //用来存储每个根结点对应的树中保存的结点个数
public:
    UF_Tree_Weighted(int N) &#123;
        this-&gt;count = N;
        this-&gt;eleAndGroup = new int[N];
        //初始化eleAndGroup中每个索引是并查集中的每个元素，而eleAndGroup中的每个元素是并查集的分组情况
        for (int i = 0; i &lt; N; i++) &#123;
            eleAndGroup[i] = i;
        &#125;

        this-&gt;sz = new int[N];
        //默认情况下，sz中每个索引处的值都是1
        for (int i = 0; i &lt; N; i++) &#123;
            sz[i] = 1;
        &#125;
    &#125;

    ~UF_Tree_Weighted() &#123;
        delete eleAndGroup;
        delete sz;
    &#125;
    //获取当前并查集中的数据有多少个分组
    int length() &#123;
        return count;
    &#125;

    //获取元素p所在的分组标识
    int find(int p) &#123;
        //return eleAndGroup[p];

        while (true) &#123;
            if (p == eleAndGroup[p]) &#123;
                return p;
            &#125;
            p = eleAndGroup[p];
        &#125;
    &#125;

    //判断并查集中的元素p和q是否在同一分组中
    bool connected(int p, int q) &#123;
        return find(p) == find(q);
    &#125;
    //合并p所在的分组和q元素所在的分组
    void unionGroup(int p, int q) &#123;
        int pRoot = find(p);
        int qRoot = find(q);

        if (pRoot == qRoot) &#123;
            return;
        &#125;

        if (sz[pRoot] &gt; sz[qRoot]) &#123;
            eleAndGroup[qRoot] = pRoot;
            sz[pRoot] += sz[qRoot];
        &#125;
        else &#123;
            eleAndGroup[pRoot] = qRoot;
            sz[qRoot] += sz[pRoot];
        &#125;

        this-&gt;count--;

    &#125;
&#125;;

int main() &#123;
    UF_Tree_Weighted uf(4);
    while (true) &#123;
        int q, p;
        cout &lt;&lt; &quot;Please input two elements:&quot;;
        cin &gt;&gt; p &gt;&gt; q;

        if (uf.connected(p, q)) &#123;
            cout &lt;&lt; &quot;两个元素在同一个分组！&quot; &lt;&lt; endl;
        &#125;
        uf.unionGroup(p, q);
        cout &lt;&lt; &quot;分组个数:&quot; &lt;&lt; uf.length() &lt;&lt; endl;

        if (uf.length() == 1) &#123;
            break;
        &#125;
    &#125;
    return 0;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>红黑树</title>
    <url>/2021/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
    <content><![CDATA[<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p><font face="宋体">红黑树是基于2-3树思想的内含有红黑链的二叉查找树，并满足以下三种条件：<br></font></p>
<ul>
<li><font face="宋体">1. 红色链接必须是左链接；</font></li>
<li> <font face="宋体">2. 任何一个结点不可能有两个红色链接；</font><span id="more"></span></li>
<li> <font face="宋体">3. 该树是完美黑色匹配，也即任意的空连到根结点的路径上的黑链接数目是相同的。</font></li>
</ul>
<h3 id="红黑树的一些基本操作"><a href="#红黑树的一些基本操作" class="headerlink" title="红黑树的一些基本操作"></a>红黑树的一些基本操作</h3><h4 id="1-左旋"><a href="#1-左旋" class="headerlink" title="1. 左旋"></a>1. 左旋</h4><p><font face="宋体">当某个结点的左子结点的链接是黑色的，而其右子结点是红色的（不满足定义中的第一个条件）则需要对其进行左旋操作。</font><br><font face="宋体"><br>左旋的过程（前提条件当前结点为h，而其右子结点为x）：</font></p>
<ul>
<li><font face="宋体">1. 让x的左子结点成为h的右子结点；</font></li>
<li> <font face="宋体">2. 让h成为x的左子结点；</font></li>
<li> <font face="宋体">3. 让h的color属性成为x的color属性；</font></li>
<li> <font face="宋体">4. 让h的color属性置为红色。</font></li>
</ul>
<p><img src="/2021/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91/1617693263761.png" alt="Alt text"></p>
<h4 id="2-右旋"><a href="#2-右旋" class="headerlink" title="2.右旋"></a>2.右旋</h4><p><font face="宋体">当某个结点的左子结点的链接是红色的，而其左子结点的左子结点也是红色的（不满足定义中的第二个条件）则需要对其进行右旋操作。</font><br><font face="宋体"><br>右旋的过程（前提条件当前结点为h，而其左子结点为x）：</font></p>
<ul>
<li><font face="宋体">1. 让x的右子结点成为h的左子结点；</font></li>
<li> <font face="宋体">2. 让h成为x的右子结点；</font></li>
<li> <font face="宋体">3. 让h的color属性成为x的color属性；</font></li>
<li> <font face="宋体">4. 让h的color属性置为红色。</font><br><img src="/2021/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91/1617693449983.png" alt="Alt text"></li>
</ul>
<h4 id="3-颜色反转"><a href="#3-颜色反转" class="headerlink" title="3.颜色反转"></a>3.颜色反转</h4><p><font face="宋体">当某个结点的左子结点的链接是红色的，而其右子结点也是红色的，则需要将其两个子结点的链接设置为黑色，而其父链接设置为红色。</font><br><img src="/2021/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91/1617693520319.png" alt="Alt text"></p>
<h3 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h3><pre><code class="cpp">/*
红黑树的CPP实现
*/
#include&lt;iostream&gt;
#include&lt;string&gt;

using namespace std;

template&lt;class Key, class Value&gt;
class Node &#123;
public:
    Key key;
    Value value;

    //记录左子结点和右子结点
    Node* left;
    Node* right;

    bool color;

    Node(Key key, Value value, Node* left, Node* right, bool color) &#123;
        this-&gt;key = key;
        this-&gt;value = value;
        this-&gt;left = left;
        this-&gt;right = right;
        this-&gt;color = color;
    &#125;
&#125;;

template&lt;class Key, class Value&gt;
class RedBlackTree &#123;
public:
    Node&lt;Key,Value&gt;* root;
    int N;

    //红黑树标识： 红 RED true， 黑 BLACK false
    const bool RED = true;
    const bool BLACK = false;

public:
    RedBlackTree(Key key, Value value, Node&lt;Key, Value&gt;* left, Node&lt;Key, Value&gt;* right, bool color) &#123;
        this-&gt;root = new Node&lt;Key, Value&gt;(key,value,left,right,color);
        this-&gt;N = 0;
    &#125;
    
    ~RedBlackTree() &#123;
        delete root;
    &#125;


    //获取树中元素的个数
    int getSize() &#123;
        return N;
    &#125;

    //判断当前结点的父指向链接是否为红色
    bool isRed(Node&lt;Key, Value&gt;* x) &#123;
        if (x == NULL) &#123;
            return false;
        &#125;

        return x-&gt;color == RED;
    &#125;

    //左旋操作
    Node&lt;Key, Value&gt;* rotateLeft(Node&lt;Key, Value&gt;* h) &#123;
        //获取h结点的右子结点x
        Node&lt;Key, Value&gt;* x = h-&gt;right;
        //让x结点的左子结点成为h结点的右子结点
        h-&gt;right = x-&gt;left;
        //让h结点成为x的左子结点
        x-&gt;left = h;
        //让x结点的color属性等于h结点的color属性
        x-&gt;color = h-&gt;color;
        //让h结点的color成为红色
        h-&gt;color = RED;

        return x;
    &#125;

    //右旋操作
    Node&lt;Key,Value&gt;* rotateRight(Node&lt;Key, Value&gt;* h) &#123;
        //获取h结点的左子结点x
        Node&lt;Key, Value&gt;* x = h-&gt;left;
        //让x的右子结点成为h的左子结点
        h-&gt;left = x-&gt;right;
        //让h成为x的右子结点
        x-&gt;right = h;
        //让x结点的color属性等于h结点的color属性
        x-&gt;color = h-&gt;color;
        //让h结点的color成为红色
        h-&gt;color = RED;

        return x;
    &#125;

    //颜色变换
    void flipColors(Node&lt;Key, Value&gt;* h) &#123;
        h-&gt;color = RED;

        h-&gt;left-&gt;color = BLACK;
        h-&gt;right-&gt;color = BLACK;
    &#125;

    int compareTo(Key key1, Key key2) &#123;
        
        return key1 - key2;
        
    &#125;

    //在指定的树中完成插入操作，并返回添加元素后新的树
    Node&lt;Key, Value&gt;* put(Node&lt;Key, Value&gt;* h, Key key, Value value) &#123;
        //若h为空，则直接返回一个红色的结点即可
        if (h == NULL) &#123;
            N++;
            return new Node&lt;Key, Value&gt;(key, value, NULL, NULL, RED);
        &#125;

        
        int cmp = compareTo(key, h-&gt;key);

        if (cmp &lt; 0) &#123;
            //继续往左
            h-&gt;left = put(h-&gt;left, key, value);
        &#125;
        else if (cmp &gt; 0) &#123;
            //继续往右
            h-&gt;right = put(h-&gt;right, key, value);
        &#125;
        else &#123;
            h-&gt;value = value;
        &#125;

        //进行左旋
        //当当前结点的左子结点为黑色，而右子结点为红色
        if (isRed(h-&gt;right) &amp;&amp; !isRed(h-&gt;left)) &#123;
            h = rotateLeft(h);
        &#125;

        //进行右旋
        //当当前结点的左子结点为红色，而其左子结点的左子结点也为红色
        if (isRed(h-&gt;left) &amp;&amp; isRed(h-&gt;left-&gt;left)) &#123;
            h = rotateRight(h);
        &#125;

        //颜色反转：当前结点的左子结点和右子结点都为红色
        if (isRed(h-&gt;left) &amp;&amp; isRed(h-&gt;right)) &#123;
            flipColors(h);
        &#125;
        
        return h;
    &#125;

    //在整棵树上完成插入操作
    void put(Key key, Value value)&#123;
        root = put(root, key, value);
        //根结点的颜色永远是黑色
        root-&gt;color = BLACK;
    &#125;

    
    //从指定的树x中查找key对应的值
    Value get(Node&lt;Key, Value&gt;* x, Key key) &#123;
        if (x == NULL) &#123;
            //C6387
            return NULL;
        &#125;

        //比较x结点的键和key的大小
        
        int cmp = compareTo(key, x-&gt;key);

        if (cmp &gt; 0) &#123;
            return get(x-&gt;right, key);
        &#125;
        else if (cmp &lt; 0) &#123;
            return get(x-&gt;left, key);
        &#125;
        else &#123;
            return x-&gt;value;
        &#125;
    &#125;

    //根据key从书中找到对应的值
    Value get(Key key) &#123;
        return get(root, key);
    &#125;
&#125;;

int main() &#123;
    RedBlackTree&lt;int, string&gt; tree(0,&quot;&quot;,NULL,NULL,true);
    tree.put(1, &quot;Tom&quot;);
    tree.put(2, &quot;Tim&quot;);
    tree.put(3, &quot;Jack&quot;);
    tree.put(4, &quot;Smith&quot;);

    string str1 = tree.get(2);
    cout &lt;&lt; str1 &lt;&lt; endl;

    string str2 = tree.get(2);
    cout &lt;&lt; str2 &lt;&lt; endl;

    string str3 = tree.get(3);
    cout &lt;&lt; str3&lt;&lt; endl;
    return 0;
&#125;

</code></pre>
<h4 id="执行结果如下："><a href="#执行结果如下：" class="headerlink" title="执行结果如下："></a>执行结果如下：</h4><p><img src="/2021/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91/1617693579337.png" alt="Alt text"></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>谈谈快速排序和归并排序</title>
    <url>/2021/04/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%92%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<p><font face="宋体">参考了《算法图解》和黑马的数据结构与算法的笔记。</font></p>
</blockquote>
<h2 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h2><p><font face="宋体">快速排序是对冒泡排序的改进，是一种典型的分而治之(divide and conquer, D&amp;C)算法。其思想是：在任意选取一个基准元素后，遍历一遍所有的元素并将所有元素分成独立的两个部分，其中一部分的任意一个元素都要比该基准要小，而另外一个组的任意一个元素要比这个基准要大，然后再对这两个部分进行同样的操作：选取基准并交换两边的元素，使得一边的元素都要比基准要小而另外一边要比基准要大，依次类推，最终使得整个队列有序。可以递归进行该操作。</font></p>
<span id="more"></span>
<h3 id="排序的原理："><a href="#排序的原理：" class="headerlink" title="排序的原理："></a>排序的原理：</h3><ul>
<li><font face="宋体">1.首先任意选取一个分界值，能够通过该分界值将所有的元素分成两个独立的部分；</font></li>
<li><font face="宋体">2.将大于该分界值的所有元素放在数组的右边，而小于该分界值的所有元素放在数组的左边；</font></li>
<li><font face="宋体">3.然后左右两边的数组又可以独立进行排序，在左侧的数组中任意选取一个分界值，并将该数组中所有大于该分界值的元素放在数组的右边，而小于该分界值的元素放在数组的左边。对于右侧的数组可以同样进行该操作；</font></li>
<li><font face="宋体">4.重复上面的过程（可以利用递归）。通过递归将左右两侧的数组都排序好后，整个数组也就有序了。</font></li>
</ul>
<h3 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h3><pre><code>/*
快速排序的CPP实现
*/
#include&lt;iostream&gt;
#include&lt;vector&gt;

using namespace std;

template&lt;class T&gt;
class QuickSort &#123;
public:
    bool compare(vector&lt;T&gt; v, int i, int j) &#123;
        return v[i] &lt; v[j];
    &#125;

    void exch(vector&lt;T&gt;&amp; v, int i, int j) &#123;
        T temp = v[i];
        v[i] = v[j];
        v[j] = temp;
    &#125;

    int partion(vector&lt;T&gt;&amp; v, int low, int high) &#123;
        int l_left = low;
        int l_right = high + 1;

        while (true) &#123;
            while (!compare(v, --l_right, low)) &#123;
                if (l_right == low) &#123;
                    break;
                &#125;
            &#125;

            while (compare(v, ++l_left, low)) &#123;
                if (l_left == high) &#123;
                    break;
                &#125;
            &#125;

            if (l_left &lt; l_right) &#123;
                exch(v, l_left, l_right);
            &#125;
            else &#123;
                break;
            &#125;


        &#125;
        exch(v, low, l_right);

        return l_right;

    &#125;

    void sort(vector&lt;T&gt;&amp; v, int low, int high) &#123;
        if (low &gt;= high) &#123;
            return;
        &#125;

        int pa = partion(v, low, high);

        sort(v, low, pa - 1);
        sort(v, pa + 1, high);


    &#125;

    void sort(vector&lt;T&gt;&amp; v) &#123;
        int low = 0;
        int high = v.size() - 1;

        sort(v, low, high);
    &#125;

&#125;;

int main()
&#123;
    vector&lt;int&gt; a = &#123; 456,8,146,849,158,8169,153,8489 &#125;;
    QuickSort&lt;int&gt; q;
    q.sort(a);
    for (vector&lt;int&gt;::iterator iter = a.begin(); iter != a.end(); iter++)
        cout &lt;&lt; *iter &lt;&lt; &quot; &quot;;
    cout &lt;&lt; endl;

    return 0;
&#125;
</code></pre>
<h4 id="运行的结果如下："><a href="#运行的结果如下：" class="headerlink" title="运行的结果如下："></a>运行的结果如下：</h4><p><img src="/2021/04/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%92%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1617885506406.png" alt="Alt text"></p>
<h2 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h2><p><font face="宋体">归并排序是一种建立在归并操作的有效的排序算法，也是一种典型的D&amp;C算法。其思想是：先将序列拆分成单个元素，然后将元素合并成有序的子序列，再将有序的子序列合并成一个有序的表。</font></p>
<h3 id="排序的原理：-1"><a href="#排序的原理：-1" class="headerlink" title="排序的原理："></a>排序的原理：</h3><ul>
<li><font face="宋体">1.尽可能将数据拆分成两个元素相等的子组，并对子组进一步拆分，至每个子组中的元素个数为1；</font></li>
<li><font face="宋体">2.将相邻的两个子组合并成一个有序的大组；</font></li>
<li><font face="宋体">3.不断的重复2，直到只有一个组为止。</font><h3 id="实现代码：-1"><a href="#实现代码：-1" class="headerlink" title="实现代码："></a>实现代码：</h3>```<br>/*<br>归并排序CPP实现</li>
<li>/<br>#include<iostream><br>#include<vector></vector></iostream></li>
</ul>
<p>using namespace std;</p>
<p>template<class t><br>class MergeSort {<br>public:<br>    T* assist;<br>    bool compare(vector<T> v, int i, int j) {<br>        return v[i] &lt; v[j];<br>    }</T></class></p>
<pre><code>void merge(vector&lt;T&gt;&amp; v, int low, int mid, int high) &#123;
    int l_left = low;
    int l_right = mid + 1;
    int index = low;
    while (l_left &lt;= mid &amp;&amp; l_right &lt;= high) &#123;
        if (compare(v, l_left, l_right)) &#123;
            assist[index++] = v[l_left++];
        &#125;
        else &#123;
            assist[index++] = v[l_right++];
        &#125;
    &#125;

    while (l_left &lt;= mid) &#123;
        assist[index++] = v[l_left++];
    &#125;

    while (l_right &lt;= high) &#123;
        assist[index++] = v[l_right++];
    &#125;

    for (int i = low; i &lt;= high; i++) &#123;
        v[i] = assist[i];
    &#125;

&#125;

void sort(vector&lt;T&gt;&amp; v, int low, int high) &#123;
    if (low &gt;= high) &#123;
        return;
    &#125;
    int mid = (low + high) / 2;
    sort(v, low, mid);
    sort(v, mid + 1, high);

    merge(v, low, mid, high);
&#125;

void sort(vector&lt;T&gt;&amp; v) &#123;
    int low = 0; 
    int high = v.size() - 1;
    assist = new T[v.size()];
    sort(v, low, high);
&#125;
</code></pre>
<p>};</p>
<p>int main() {<br>    vector<int> a = { 456,8,146,849,158,8169,153,8489 };<br>    MergeSort<int> q;<br>    q.sort(a);<br>    for (vector<int>::iterator iter = a.begin(); iter != a.end(); iter++)<br>        cout &lt;&lt; *iter &lt;&lt; “ “;<br>    cout &lt;&lt; endl;<br>    return 0;<br>}</int></int></int></p>
<pre><code>#### 运行的结果如下：
![Alt text](./谈谈快速排序和归并排序/1617887489715.png)

## 快速排序与归并排序的时间复杂度分析
&lt;font face=&quot;宋体&quot;&gt;归并排序的时间复杂度是O(N*logN)。而快速排序在一般情况下的时间复杂度是O(N*logN)，但是在比较糟糕的情况下的时间复杂度是O(N^2)。&lt;/font&gt;
&gt;&lt;font face=&quot;宋体&quot;&gt;
那什么是快速排序的糟糕情况呢？&lt;/font&gt;

&lt;font face=&quot;宋体&quot;&gt;
其实，正如前面看到的，快速排序依赖你所选取的基准值，假如你每次选取的基准值都是最小的那一个，最后分组的时候，只有一边有元素，而另外一边没有元素。（看下面这张图）&lt;/font&gt;

![Alt text](./谈谈快速排序和归并排序/1617887997615.png)

&lt;font face=&quot;宋体&quot;&gt;注意，数组并没有像如期那样分为两部分，相反，其中一个数组永远都是空的，这就会导致调用栈非常长。在这种情况下，栈长为O(N)，在调用栈的每一层都涉及O(N)个元素，因此此时的时间复杂度是O(N^2)。（看下面这张图）
&lt;/font&gt;

![Alt text](./谈谈快速排序和归并排序/1617888304641.png)

&lt;font face=&quot;宋体&quot;&gt;一般情况下，选取的元素能够将数组分为两个部分，此时栈长为O(logN)，因此此时的时间复杂度为O(N*logN)。&lt;/font&gt;


&gt; &lt;font face=&quot;宋体&quot;&gt;
既然快排会存在这种糟糕的情况，而归并排序的时间复杂度一直是O(N*logN)，为什么不考虑一直用归并排序呢？&lt;/font&gt;

&lt;font face=&quot;宋体&quot;&gt;其实，在一般情况下，虽然快速排序和归并排序的时间复杂度一直是O(N*logN)，但是快速排序和归并排序之间还相差了一个常量时间，也就是前面的系数O(l*N*logN)。快速排序的l要比归并排序的l要小，因此，综合来看还是快速排序的速度要更快一些。&lt;/font&gt;
</code></pre>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
</search>
