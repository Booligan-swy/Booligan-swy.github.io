<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>双指针类</title>
    <url>/2021/04/13/LeetCode/%E5%8F%8C%E6%8C%87%E9%92%88%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="LeetCode167"><a href="#LeetCode167" class="headerlink" title="LeetCode167:"></a>LeetCode167:</h2><p>题目描述:</p>
<p><font face="宋体">给定一个已按照 <strong>升序排列</strong> 的整数数组 <code>numbers</code> ，请你从数组中找出两个数满足相加之和等于目标数 <code>target</code> 。</font></p>
<p><img src="/2021/04/13/LeetCode/%E5%8F%8C%E6%8C%87%E9%92%88%E7%B1%BB/image-20210413160616668.png" alt="image-20210413160616668"></p>
<h3 id="题解思路："><a href="#题解思路：" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">可以使用双指针，一个指针指向数组的最左边，一个指向最右边，若两者指向的元素相加大于目标数，则将指向右边的指针减一，同理，若两者指向的元素相加小于目标数，则将指向左边的指针加一。</font></p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> l_left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> l_right <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>l_left<span class="token operator">&lt;</span>l_right<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>l_left<span class="token punctuation">]</span><span class="token operator">+</span>numbers<span class="token punctuation">[</span>l_right<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>l_left<span class="token punctuation">]</span><span class="token operator">+</span>numbers<span class="token punctuation">[</span>l_right<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                l_right<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                l_left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">{</span>l_left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>l_right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode88"><a href="#LeetCode88" class="headerlink" title="LeetCode88:"></a>LeetCode88:</h2><p>题目描述:</p>
<p><font face="宋体">给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。</font></p>
<p><img src="/2021/04/13/LeetCode/%E5%8F%8C%E6%8C%87%E9%92%88%E7%B1%BB/image-20210413160529345.png" alt="image-20210413160529345"></p>
<h3 id="题解思路：-1"><a href="#题解思路：-1" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">要将两个有序的数组有序分配到nums1，可以使用双指针的方法，但是在本题目上还需要一个指针去指向赋值的位置index，m和n分别作为nums1和nums2的指针，比较并将较大的数放入索引为index的位置。</font></p>
<h3 id="代码如下：-1"><a href="#代码如下：-1" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> index <span class="token operator">=</span> m<span class="token operator">+</span>n<span class="token number">-1</span><span class="token punctuation">;</span>
        <span class="token operator">--</span>n<span class="token punctuation">;</span>
        <span class="token operator">--</span>m<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span> m<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">></span> nums2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                nums1<span class="token punctuation">[</span>index<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>m<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                nums1<span class="token punctuation">[</span>index<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>n<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            nums1<span class="token punctuation">[</span>index<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>n<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode142"><a href="#LeetCode142" class="headerlink" title="LeetCode142:"></a>LeetCode142:</h2><p>题目描述:</p>
<p><font face="宋体">给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意，pos 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</font></p>
<ul>
<li><font face="宋体">说明：不允许修改给定的链表。</font></li>
<li><font face="宋体">进阶：你是否可以使用 O(1) 空间解决此题？</font></li>
</ul>
<h3 id="题解思路：-2"><a href="#题解思路：-2" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">判断链表是否存在环路是双指针应用的典型，通过指定两个快慢指针，若链表不存在环路，则优先判断快指针是否走到尽头（指向nullptr），反之，快慢指针会不停的走下去，直到快指针与慢指针在某个节点相遇。</font></p>
<p><font face="宋体">若要知道环的入口，只需在快慢指针相遇时，让第三个指针指向head，并与慢指针一样的速度，若两者相遇，则该相遇的位置就是环的入口位置。</font></p>
<h3 id="代码如下：-2"><a href="#代码如下：-2" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    ListNode <span class="token operator">*</span><span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       
        ListNode<span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
        ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
        slow <span class="token operator">=</span> slow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
        fast <span class="token operator">=</span> fast<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> fast<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            slow <span class="token operator">=</span> slow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
            fast <span class="token operator">=</span> fast<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span><span class="token punctuation">{</span>
            slow <span class="token operator">=</span> slow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
            fast <span class="token operator">=</span> fast<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> fast<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode76"><a href="#LeetCode76" class="headerlink" title="LeetCode76:"></a>LeetCode76:</h2><blockquote>
<p>此题待更……</p>
</blockquote>
<p>题目描述:</p>
<p><font face="宋体">给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。</font></p>
<ul>
<li><font face="宋体">注意：如果 s 中存在这样的子串，我们保证它是唯一的答案。</font></li>
</ul>
<p><img src="/2021/04/13/LeetCode/%E5%8F%8C%E6%8C%87%E9%92%88%E7%B1%BB/image-20210413171853222.png" alt="image-20210413171853222"></p>
<h3 id="题解思路：-3"><a href="#题解思路：-3" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<h3 id="代码如下：-3"><a href="#代码如下：-3" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp">
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="LeetCode633"><a href="#LeetCode633" class="headerlink" title="LeetCode633:"></a>LeetCode633:</h2><p>题目描述:</p>
<p><font face="宋体">给定一个非负整数 <code>c</code> ，你要判断是否存在两个整数 <code>a</code> 和 <code>b</code>，使得 <code>a^2 + b^2 = c</code> 。</font></p>
<h3 id="题解思路：-4"><a href="#题解思路：-4" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">第一眼看到这个题目感觉很简单，并联想到使用双指针去处理这件事。左边一个指针，右边一个指针，然后求取这两个指针指向的元素平方是否与目标数相等，如果大了，就把右边的指针减一，否则就是将左边的指针加一。做出的第一版代码在leetcode上超时。</font></p>
<p><font face="宋体">方法二：利用一个for循环，当目标数减去i值后开平方，然后将开平方的数与其int类型进行比较是否相等，若相等则返回true，否则返回false。</font></p>
<p><font face="宋体">方法三：在基于方法二的基础上，不使用系统的sqrt方法，而是使用二分查找。</font></p>
<h3 id="代码如下：-4"><a href="#代码如下：-4" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*超时代码,并未能成功验证代码的正确性*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">judgeSquareSum</span><span class="token punctuation">(</span><span class="token keyword">long</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">long</span> l_left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> l_right <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>l_left <span class="token operator">&lt;=</span> l_right<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>l_left<span class="token operator">*</span>l_left <span class="token operator">==</span> c <span class="token operator">||</span> l_right<span class="token operator">*</span>l_right <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>l_left<span class="token operator">*</span>l_left<span class="token operator">+</span>l_right<span class="token operator">*</span>l_right <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>
                l_right<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l_left<span class="token operator">*</span>l_left<span class="token operator">+</span>l_right<span class="token operator">*</span>l_right <span class="token operator">&lt;</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>
                l_left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*方法二*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">judgeSquareSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">*</span>i <span class="token operator">&lt;=</span> c<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">double</span> j <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>c<span class="token operator">-</span>i<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*方法三：递归使用二分查找*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">judgeSquareSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">*</span>i <span class="token operator">&lt;=</span> c<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">long</span> j <span class="token operator">=</span> c<span class="token operator">-</span>i<span class="token operator">*</span>i<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">bool</span> <span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token keyword">long</span> low<span class="token punctuation">,</span> <span class="token keyword">long</span> high<span class="token punctuation">,</span> <span class="token keyword">long</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">></span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">long</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">*</span>mid <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> mid<span class="token number">-1</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">*</span>mid<span class="token operator">&lt;</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode680"><a href="#LeetCode680" class="headerlink" title="LeetCode680:"></a>LeetCode680:</h2><p>题目描述:</p>
<p><font face="宋体">给定一个非空字符串 <code>s</code>，<strong>最多</strong>删除一个字符。判断是否能成为回文字符串。</font></p>
<p><img src="/2021/04/13/LeetCode/%E5%8F%8C%E6%8C%87%E9%92%88%E7%B1%BB/image-20210413203328805.png" alt="image-20210413203328805"></p>
<h3 id="题解思路：-5"><a href="#题解思路：-5" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">利用双指针，一个指向字符串的最左边，一个指向字符串的最右边，分别向中间遍历，若全部能够遍历完并且左边指针指向的字符时刻等于右边指针指向的字符，则原字符串是回文。若在其中某一步发现两者不相等，则考虑剩下部分的字符是否是回文，若是，则满足题目要求，在删除一个字符的情况下还是回文，否则就不满足题目要求。</font></p>
<h3 id="代码如下：-5"><a href="#代码如下：-5" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">bool</span> t <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">,</span> j <span class="token operator">=</span> high<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">bool</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> high <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">char</span> c_left <span class="token operator">=</span> s<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">char</span> c_right <span class="token operator">=</span> s<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>c_left <span class="token operator">==</span> c_right<span class="token punctuation">)</span><span class="token punctuation">{</span>
                low<span class="token operator">++</span><span class="token punctuation">;</span>
                high<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> low<span class="token punctuation">,</span>high<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>low<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode524"><a href="#LeetCode524" class="headerlink" title="LeetCode524:"></a>LeetCode524:</h2><p>题目描述:</p>
<p><font face="宋体">给定一个字符串和一个字符串字典，找到字典里面最长的字符串，该字符串可以通过删除给定字符串的某些字符来得到。如果答案不止一个，返回长度最长且字典顺序最小的字符串。如果答案不存在，则返回空字符串。</font></p>
<h3 id="题解思路：-6"><a href="#题解思路：-6" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题细想一下还是挺简单的，就是要找到字典中的字符串中的字符是否能在目标字符串找到，可以使用for循环一一进行对比。如果找到了字典中的某个字符串在目标字符串中，就记录下来，并对字典中剩下的字符串进行相同的操作，若也发现了符合要求的字符串，就与之前记录的字符串进行对比，最终选择最长的字符串或者是等长的但是字符顺序最小的字符串作为输出即可。</font></p>
<h3 id="代码如下：-6"><a href="#代码如下：-6" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    string <span class="token function">findLongestWord</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> dictionary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        string str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>string s_d<span class="token operator">:</span> dictionary<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> s_d<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s_d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    j<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>s_d<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>s_d<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>s_d<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>s_d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        str <span class="token operator">=</span> s_d<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> str<span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode340"><a href="#LeetCode340" class="headerlink" title="LeetCode340:"></a>LeetCode340:</h2><blockquote>
<p>未取得会员，无法查看题目，待更……</p>
</blockquote>
<p>题目描述:</p>
<p><font face="宋体">待更……</font></p>
<h3 id="题解思路：-7"><a href="#题解思路：-7" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">待更…….</font></p>
<h3 id="代码如下：-7"><a href="#代码如下：-7" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//待更......</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心算法类</title>
    <url>/2021/04/12/LeetCode/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="LeetCode435"><a href="#LeetCode435" class="headerlink" title="LeetCode435:"></a>LeetCode435:</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><font face="宋体">给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</font></p>
<p><img src="/2021/04/12/LeetCode/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%B1%BB/image-20210413093253378.png" alt="image-20210413093253378"></p>
<h3 id="题解思路："><a href="#题解思路：" class="headerlink" title="题解思路："></a>题解思路：</h3><p>按照贪心策略，可以先根据每个区间的结尾数字进行递增排序，然后依次考察前一个区间的结尾数字和后一个区间的起始数字比对大小，若后一个区间的起始数字大于等于前一个区间的结尾数字就保留后一个区间，否则就被剔除，并记录剔除的个数。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">eraseOverlapIntervals</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> intervals<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> removeCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>
                removeCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                temp <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> removeCount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode605"><a href="#LeetCode605" class="headerlink" title="LeetCode605:"></a>LeetCode605:</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><font face="宋体">假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。给你一个整数数组  flowerbed 表示花坛，由若干 0 和 1 组成，其中 0 表示没种植花，1 表示种植了花。另有一个数 n ，能否在不打破种植规则的情况下种入 n 朵花？能则返回 true ，不能则返回 false。</font></p>
<p><img src="/2021/04/12/LeetCode/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%B1%BB/image-20210413101836515.png" alt="image-20210413101836515"></p>
<h3 id="题解思路：-1"><a href="#题解思路：-1" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face>如果第一块地上种植了花，第二块必须是空地，因为要满足题目要求，不能在相邻的两块地上种植花。若要种植花，必须考虑第三块地是否是空地，若下一块（也就是第四块）也是空地或者第三块就是最后一块空白土地，直接在第三块上种植。为了简化解题的过程，我们直接考虑第一块地为空地的情况，若第一块不是空地，则将指针指向第二块空地，然后再考虑下一块地是否是最后一块地或者下下块地也是空地，就种植花。</font></p>
<h3 id="代码如下：-1"><a href="#代码如下：-1" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">canPlaceFlowers</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> flowerbed<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>flowerbed<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//直接考虑索引的第一块地是空地的情况</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>flowerbed<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> flowerbed<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>flowerbed<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    n<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode452："><a href="#LeetCode452：" class="headerlink" title="LeetCode452："></a>LeetCode452：</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><font face="宋体">在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 x_start，x_end， 且满足  x_start ≤ x ≤ x_end，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。给你一个数组 points ，其中 points [i] = [x_start,x_end] ，返回引爆所有气球所必须射出的最小弓箭数。</font></p>
<h3 id="题解思路：-2"><a href="#题解思路：-2" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">根据题目意思，我们先将这些气球的截止坐标按照递增进行排序，结尾数字越小越靠前。按照贪心规则，越靠前的气球越容易成为箭刺中的第一个目标，为了能够尽可能多的射中气球，调整箭的位置越靠近目标（要射中的第一个气球）的右侧，越容易射中更多的气球。看下面这张图，若箭从1位置射出只能射中黄色的气球，若将箭调整到2位置处，就可以射中黄色和深蓝色两个气球。后面射出的箭调整同理。</font></p>
<p><img src="/2021/04/12/LeetCode/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%B1%BB/image-20210413111554157.png" alt="image-20210413111554157"></p>
<h3 id="代码如下：-2"><a href="#代码如下：-2" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">findMinArrowShots</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> points<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>points<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>points<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> points<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> vector_ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> pos <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>
                vector_ans<span class="token operator">++</span><span class="token punctuation">;</span>
                pos <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> vector_ans<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p> 待更……</p>
</blockquote>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>中兴捧月神算法-算法精英挑战赛-比特派第一场试题总结</title>
    <url>/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="A-跳高"><a href="#A-跳高" class="headerlink" title="A. 跳高"></a>A. 跳高</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><font face="宋体">在新的一年，牛牛想跳得更高。牛牛本身可以跳高h米。同时牛牛有n颗跳高弹，使用第i颗跳高弹可以使牛牛跳高高度增加$a_{i}$米，且跳高弹的效果是可以叠加的，也就是说如果牛牛使用多颗跳高弹，那么他的跳高高度将会增加这些跳高弹单个效果的和。每颗跳高弹只能使用一次。请问牛牛最少需要使用多少个跳高弹，才能让牛牛的高度至少是u米高呢？数据保证答案存在。</font></p>
<p><img src="/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/image-20210426164903485.png" alt="image-20210426164903485"></p>
<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p><img src="/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/image-20210426164949325.png" alt="image-20210426164949325"></p>
<p><img src="/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/image-20210426165003246.png" alt="image-20210426165003246"></p>
<h3 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h3><p><font face="宋体">这道题很简单，按照贪心算法的原则，每次使用能跳最高的跳高弹，然后记录用了多少个跳高蛋即可。</font></p>
<p><font face="宋体">这里题目对运行的时间和空间都是有要求的。如下所示：</font></p>
<p><img src="/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/image-20210426165657069.png" alt="image-20210426165657069"></p>
<p><font face="宋体">如果使用自带的查找最大值索引的方法max_element会超时，因此，考虑先对其进行排序，通过索引直接查找即可。</font></p>
<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a_high<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> u <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>h<span class="token operator">>></span>u<span class="token punctuation">;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>
        a_high<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> sumHigh <span class="token operator">=</span> h<span class="token punctuation">,</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>a_high<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a_high<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> maxPosition <span class="token operator">=</span> a_high<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>sumHigh <span class="token operator">&lt;</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>
        
        sumHigh <span class="token operator">+</span><span class="token operator">=</span> a_high<span class="token punctuation">[</span>maxPosition<span class="token punctuation">]</span><span class="token punctuation">;</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
        maxPosition<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>count<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="B-切绳子"><a href="#B-切绳子" class="headerlink" title="B. 切绳子"></a>B. 切绳子</h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">牛牛有一条长度为n的绳子。第一天，绳子的长度为n。第二天，这条绳子会被切成两段长度分别为$⌊n2⌋,n−⌊\frac{n}{2}⌋$。第三天，对于第二天切出来的每段长度大于1的绳子，设其长度为m，牛牛又会将其切成$⌊m2⌋,m−⌊\frac{m}{2}⌋$。 如此反复切下去… … </font></p>
<p>  <font face="宋体">但是，牛牛知道，终有一天所有的绳子都会被切成长度为1的绳子，到时候他就没有绳子可切了。所有绳子都变成长度为1的绳子是第几天？ </font></p>
<p> <font face="宋体"> 注：${\lfloor\frac{n}{2}\rfloor}$表示n除以2向下取整。</font></p>
<p><img src="/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/image-20210426170731872.png" alt="image-20210426170731872"></p>
<h3 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h3><p><img src="/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/image-20210426170756221.png" alt="image-20210426170756221"></p>
<h3 id="题解思路："><a href="#题解思路：" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题的思想还是很简单的，为了保证能够全部砍成长度为1的绳子，每次都会将一个长度为m的绳子砍成$\lfloor\frac{m}{2}\rfloor$和$\lfloor m-\frac{m}{2}\rfloor$，然后找到砍剩下最长的绳子，一般就是$\lfloor\ m-\frac{m}{2}\rfloor$，再对其进行操作即可，当该部分的都被砍成长度为1的绳子时，也就是所有的绳子都被砍成长度为1的小块。 </font></p>
<blockquote>
<p><font face="宋体">这里需要注意的是绳子长度的范围，如果声明为int就达不到题目的要求，需要声明为long类型。见程序中的tmp和n两个变量。</font></p>
</blockquote>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> repo(i,c,n) for(int i = c; i &lt; n; i++)</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//int day = 1;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        n <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">>=</span> n<span class="token operator">-</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">?</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">(</span>n<span class="token operator">-</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里可以直接写n = n - n / 2;  </span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> T<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>T<span class="token punctuation">;</span>
    <span class="token function">repo</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">long</span> tmp<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token function">solve</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="C-做任务"><a href="#C-做任务" class="headerlink" title="C. 做任务"></a>C. 做任务</h2><h3 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">假设我们有一些任务列表，任务编号从1开始。不同的任务难度也不一样，分为1-5级。</font> </p>
<p>  <font face="宋体">我们打算把这些任务分配给牛牛，可是牛牛比较懒，每次他接受到一个任务后，他都会从自己的todo list里找到“难度各不相同且编号和最大的五个任务”，然后再一起完成，否则的话，牛牛就把任务放到自己的todo list，什么也不做。  </font></p>
<p> <font face="宋体">请你根据输入的任务列表的情况，给出牛牛完成任务的情况。</font></p>
<p><img src="/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/image-20210426193727265.png" alt="image-20210426193727265"></p>
<h3 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h3><p><img src="/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/image-20210426193832911.png" alt="image-20210426193832911"></p>
<h3 id="题解思路：-1"><a href="#题解思路：-1" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题中任务的难度等级只有5，所以可以定义一个栈用来存储每个任务难度的索引，见代码中的s[1],s[2],s[3],s[4],s[5]。在示例1中，s[1]压入一个索引1和一个索引2，s[2]压入一个索引3和一个索引4，后面的类似。当s[5]为非空的时候直接输出需要完成任务的索引，也就是每个栈弹出一个元素，若s[5]是空的，就一直输出-1即可。</font></p>
<p><img src="/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/image-20210426201400557.png" alt="image-20210426201400557"></p>
<h3 id="代码如下：-1"><a href="#代码如下：-1" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> repo(i,c,n) for(int i = c; i &lt; n; i++)</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">repo</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>
        s<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">++</span>k<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">>=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">++</span>m <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
                s<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            cout<span class="token operator">&lt;&lt;</span><span class="token string">"-1"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="D-换队伍"><a href="#D-换队伍" class="headerlink" title="D. 换队伍"></a>D. 换队伍</h2><h3 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">在一个超市里有两个收银台，现在它们面前排了长长的队伍。</font></p>
<p><font face="宋体">第一个收银台前排了$n_{1}$个人，从靠近收银台开始分别编号$1,2,…,n_{1}$。 </font></p>
<p><font face="宋体">第二个收银台前排了$n_{2}$个人，从靠近收银台开始分别编号$n_{1}+1,n_{1}+2,…,n_{1}+n_{2}$。 </font></p>
<p><font face="宋体">可是总有一些人觉的自己的队伍排的太慢了，会从自己的队伍里离开，然后排在另一个队伍的最后。 那当所有的人都换完队伍后，这两个队伍的编号最后是什么样的呢？</font></p>
<p><img src="/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/image-20210426201757135.png" alt="image-20210426201757135"></p>
<h3 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h3><p><img src="/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/image-20210426201819512.png" alt="image-20210426201819512"></p>
<h3 id="题解思路：-2"><a href="#题解思路：-2" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题的思想也很简单，无非是将要换队伍的编号放在另一个队伍的后面，你如果使用了find或者是迭代器查找、删除的话，肯定会超时。因此可以定义一个辅助数组，队伍的编号作为数组的索引，然后记录其在哪个队列和对应队列中的位置。只需要维护这个数组，通过数组的查询进行相关操作即可。详细见代码。</font></p>
<p><img src="/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/image-20210426205144873.png" alt="image-20210426205144873"></p>
<h3 id="代码如下：-2"><a href="#代码如下：-2" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> repo(i,c,n) for(int i = c; i &lt; n; i++)</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> Pos<span class="token punctuation">{</span>
    <span class="token keyword">int</span> que_num<span class="token punctuation">;</span>
    <span class="token keyword">int</span> pos<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>q<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n1<span class="token operator">>></span>n2<span class="token operator">>></span>q<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//q1表示队伍1，q2表示队伍2</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">q1</span><span class="token punctuation">(</span>n1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">q2</span><span class="token punctuation">(</span>n2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//定义一个辅助数组存储每个编号以及其在对应的队伍中的位置</span>
    vector<span class="token operator">&lt;</span>Pos<span class="token operator">></span> <span class="token function">que_num_pos</span><span class="token punctuation">(</span>n1<span class="token operator">+</span>n2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">repo</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        q1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        que_num_pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>que_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        que_num_pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">repo</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n1<span class="token operator">+</span>n2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        q2<span class="token punctuation">[</span>i<span class="token operator">-</span>n1<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        que_num_pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>que_num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        que_num_pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> i<span class="token operator">-</span>n1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">repo</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>tmp<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>que_num_pos<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">.</span>que_num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            q1<span class="token punctuation">[</span>que_num_pos<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            que_num_pos<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">.</span>que_num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
            n2<span class="token operator">++</span><span class="token punctuation">;</span>
            que_num_pos<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> n2<span class="token punctuation">;</span>
            q2<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            q2<span class="token punctuation">[</span>que_num_pos<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            que_num_pos<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">.</span>que_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            n1<span class="token operator">++</span><span class="token punctuation">;</span>
            que_num_pos<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> n1<span class="token punctuation">;</span>
            q1<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
  
    <span class="token punctuation">}</span>
    
    <span class="token comment" spellcheck="true">//输出结果</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator iter <span class="token operator">=</span> q1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter <span class="token operator">!=</span> q1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>iter<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>iter <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>iter<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator iter <span class="token operator">=</span> q2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter <span class="token operator">!=</span> q2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>iter<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>iter <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>iter<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="E-反复横跳"><a href="#E-反复横跳" class="headerlink" title="E. 反复横跳"></a>E. 反复横跳</h2><h3 id="题目描述：-3"><a href="#题目描述：-3" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">牛牛在位置s，牛妹在位置t，初始时op=1,step=1，牛牛每次可以执行以下操作之一：</font></p>
<p><font face="宋体">1.跳：牛牛从当前所在位置x跳到$x=x+op∗step$，随后op=op∗−1,step=step∗2。</font></p>
<p><font face="宋体">2.重置：令op=1,step=1。</font></p>
<p><font face="宋体">求当牛牛的策略足够优秀时，从{s}<em>s</em>走到牛妹身边{t}<em>t</em>所需要执行的最少操作次数。</font></p>
<p><img src="/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/image-20210426210030883.png" alt="image-20210426210030883"></p>
<h3 id="示例：-4"><a href="#示例：-4" class="headerlink" title="示例："></a>示例：</h3><p><img src="/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/image-20210426210056696.png" alt="image-20210426210056696"></p>
<h3 id="题解思路：-3"><a href="#题解思路：-3" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">待定…</font></p>
<h3 id="代码如下：-3"><a href="#代码如下：-3" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> repo(i,s,t) for(int i = s; i &lt;= t; i++)</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>op<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">repo</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>op<span class="token operator">*</span>step<span class="token punctuation">;</span>
        op <span class="token operator">=</span> <span class="token operator">-</span>op<span class="token punctuation">;</span>
        step <span class="token operator">=</span> step <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">100</span><span class="token operator">*</span>N<span class="token punctuation">)</span><span class="token punctuation">{</span>
            k <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//给dp赋值为无穷大</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">repo</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token function">repo</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x<span class="token operator">+</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token operator">+</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>N<span class="token operator">+</span>x<span class="token operator">+</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//break;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        x <span class="token operator">=</span> <span class="token operator">-</span>i<span class="token punctuation">;</span>
        <span class="token function">repo</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x<span class="token operator">+</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>x<span class="token operator">+</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>x<span class="token operator">+</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>x<span class="token operator">+</span>N<span class="token operator">+</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//break;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> s<span class="token punctuation">,</span>t<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>s<span class="token operator">>></span>t<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> t<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"0"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>s<span class="token operator">-</span>t<span class="token operator">+</span>N<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="F-旅游"><a href="#F-旅游" class="headerlink" title="F. 旅游"></a>F. 旅游</h2><h3 id="题目描述：-4"><a href="#题目描述：-4" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/image-20210426210828169.png" alt="image-20210426210828169"></p>
<h3 id="示例：-5"><a href="#示例：-5" class="headerlink" title="示例："></a>示例：</h3><p><img src="/2021/04/26/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B8%AD%E5%85%B4%E6%8D%A7%E6%9C%88%E7%A5%9E%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B-%E6%AF%94%E7%89%B9%E6%B4%BE%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/image-20210426210923205.png" alt="image-20210426210923205"></p>
<h3 id="题解思路：-4"><a href="#题解思路：-4" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">待定….<a href="https://ac.nowcoder.com/acm/contest/12949/F">https://ac.nowcoder.com/acm/contest/12949/F</a></font></p>
<p><a href="https://ac.nowcoder.com/acm/contest/12949#question">https://ac.nowcoder.com/acm/contest/12949#question</a></p>
<h3 id="代码如下：-4"><a href="#代码如下：-4" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//待定</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>中兴捧月神算法-算法精英挑战赛-比特派试题总结</category>
      </categories>
      <tags>
        <tag>中兴捧月神算法-算法精英挑战赛-比特派试题总结</tag>
      </tags>
  </entry>
  <entry>
    <title>优化方法总结比较</title>
    <url>/2021/05/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<h1 id="优化方法的总结、比较以及实现"><a href="#优化方法的总结、比较以及实现" class="headerlink" title="优化方法的总结、比较以及实现"></a>优化方法的总结、比较以及实现</h1><h2 id="随机梯度下降法"><a href="#随机梯度下降法" class="headerlink" title="随机梯度下降法"></a>随机梯度下降法</h2><h3 id="Batch-Gradient-Descent-BGD"><a href="#Batch-Gradient-Descent-BGD" class="headerlink" title="Batch Gradient Descent(BGD)"></a>Batch Gradient Descent(BGD)</h3><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p><font face="宋体">BGD算法就是利用所有的样本数据计算损失函数的梯度，然后利用该梯度来更新模型的参数。 </font><br>$$<br>\theta_{k+1} = \theta_{k}+\Delta\theta\<br>\Delta\theta = -\eta*g_{k}<br>$$</p>
<h4 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''
BGD.py
实例: y = x1 + 2 * x2;
日期：2021/5/12 
'''</span>
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np


<span class="token keyword">def</span> <span class="token function">bgd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 训练集</span>
    x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 初始化</span>
    m<span class="token punctuation">,</span> dim <span class="token operator">=</span> x<span class="token punctuation">.</span>shape
    <span class="token comment" spellcheck="true"># 参数</span>
    theta <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>dim<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># print(theta)</span>
    <span class="token comment" spellcheck="true"># print(x)</span>
    <span class="token comment" spellcheck="true"># print(np.dot(x,theta))</span>
    <span class="token comment" spellcheck="true"># print(np.dot(x,theta))</span>
    <span class="token comment" spellcheck="true"># 学习率</span>
    eta <span class="token operator">=</span> <span class="token number">0.01</span>
    <span class="token comment" spellcheck="true"># 停止迭代的错误阈值</span>
    threshold <span class="token operator">=</span> <span class="token number">0.0001</span>
    <span class="token comment" spellcheck="true"># 迭代次数</span>
    iterations <span class="token operator">=</span> <span class="token number">1500</span>
    <span class="token comment" spellcheck="true"># 初始错误</span>
    error <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>

    <span class="token comment" spellcheck="true"># 开始迭代</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>iterations<span class="token punctuation">)</span><span class="token punctuation">:</span>
        error <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>theta<span class="token punctuation">)</span> <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">,</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>theta<span class="token punctuation">)</span> <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print(error)</span>

        <span class="token keyword">if</span> abs<span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> threshold<span class="token punctuation">:</span>
            <span class="token keyword">break</span>

        theta <span class="token operator">-=</span> eta <span class="token operator">*</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>T<span class="token punctuation">,</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span class="token operator">-</span>y<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print(np.dot(x.T, np.dot(x,theta)-y))</span>
        <span class="token comment" spellcheck="true"># print(np.dot(x,theta)-y)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'多元变量：'</span><span class="token punctuation">,</span> <span class="token string">'迭代次数：%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'theta：'</span><span class="token punctuation">,</span> theta<span class="token punctuation">,</span> <span class="token string">'error：%f'</span> <span class="token operator">%</span> error<span class="token punctuation">)</span>



<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    bgd<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点:"></a><strong>优点:</strong></h4><ul>
<li><font face="宋体">如果Loss为凸函数，那BGD能够保证收敛到全局最优值；如果Loss是非凸函数，那么BGD能够收敛到局部最优值（Local Minimum）。</font></li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a><strong>缺点:</strong></h4><ul>
<li><font face="宋体">由于每次迭代训练都要在整个数据集上计算一次，若数据量很大的时候，BGD就非常的慢，又要消耗较大的内存；</font></li>
<li><font face="宋体">BGD不允许在线更新模型的参数，若新添加实例，就会导致出错。</font></li>
</ul>
<h3 id="Stochastic-Gradient-Descent-SGD"><a href="#Stochastic-Gradient-Descent-SGD" class="headerlink" title="Stochastic Gradient Descent(SGD)"></a>Stochastic Gradient Descent(SGD)</h3><h4 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h4><p><font face="宋体">SGD是利用单个样本计算损失函数的梯度，然后利用该梯度来更新模型的参数。 </font><br>$$<br>\theta_{k+1} = \theta_{k}+\Delta\theta\<br>\Delta\theta = -\eta*g_{k,i}<br>$$</p>
<h4 id="实现代码：-1"><a href="#实现代码：-1" class="headerlink" title="实现代码："></a>实现代码：</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''
SGD.py
实例：y = x1 + 2 * x2
'''</span>
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

<span class="token keyword">def</span> <span class="token function">SGD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 训练集</span>
    x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 初始化</span>
    m<span class="token punctuation">,</span> dim <span class="token operator">=</span> x<span class="token punctuation">.</span>shape
    <span class="token comment" spellcheck="true"># 参数</span>
    theta <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>dim<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># print(theta)</span>
    <span class="token comment" spellcheck="true"># print(x)</span>
    <span class="token comment" spellcheck="true"># print(np.dot(x,theta))</span>
    <span class="token comment" spellcheck="true"># print(np.dot(x,theta))</span>
    <span class="token comment" spellcheck="true"># 学习率</span>
    eta <span class="token operator">=</span> <span class="token number">0.01</span>
    <span class="token comment" spellcheck="true"># 停止迭代的错误阈值</span>
    threshold <span class="token operator">=</span> <span class="token number">0.0001</span>
    <span class="token comment" spellcheck="true"># 迭代次数</span>
    iterations <span class="token operator">=</span> <span class="token number">1500</span>
    <span class="token comment" spellcheck="true"># 初始错误</span>
    error <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>

    <span class="token comment" spellcheck="true"># 开始迭代</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>iterations<span class="token punctuation">)</span><span class="token punctuation">:</span>
        error <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>theta<span class="token punctuation">)</span> <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">,</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>theta<span class="token punctuation">)</span> <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print(error)</span>

        <span class="token keyword">if</span> abs<span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> threshold<span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        j <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span>

        theta <span class="token operator">-=</span> eta <span class="token operator">*</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>T<span class="token punctuation">,</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span class="token operator">-</span>y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'多元变量：'</span><span class="token punctuation">,</span> <span class="token string">'迭代次数：%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'theta：'</span><span class="token punctuation">,</span> theta<span class="token punctuation">,</span> <span class="token string">'error：%f'</span> <span class="token operator">%</span> error<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    SGD<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点:"></a><strong>优点:</strong></h4><ul>
<li><font face="宋体">算法收敛速度快；</font></li>
<li><font face="宋体">可以在线更新参数；</font></li>
<li><font face="宋体">有几率跳出一个比较差的局部最优而收敛到一个更好的局部最优甚至是全局最优。 </font></li>
</ul>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点:"></a><strong>缺点:</strong></h4><ul>
<li><font face="宋体">容易收敛到局部最优，并且容易被困在鞍点。</font></li>
</ul>
<blockquote>
<p>待更…</p>
</blockquote>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集</title>
    <url>/2021/04/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<h2 id="并查集的定义"><a href="#并查集的定义" class="headerlink" title="并查集的定义"></a>并查集的定义</h2><p><font face="宋体">并查集是一种树型的数据结构，并可以高效的执行下面两种操作：</font></p>
<ul>
<li><font face="宋体">1. 查询两个元素是否属于同一分组；</font></li>
<li><font face="宋体">2. 合并两个元素所在的分组。</font><span id="more"></span>
<h2 id="并查集的结构特点"><a href="#并查集的结构特点" class="headerlink" title="并查集的结构特点"></a>并查集的结构特点</h2><font face="宋体">并查集是一种树型结构，但这棵树跟之前理解的二叉树、红黑树以及B树等不一样，这种树的要求比较简单。</font></li>
<li><font face="宋体"> 每一个元素都有唯一的对应的分组标识（一个结点）；</font></li>
<li><font face="宋体">每一组数据中的多个元素都在同一棵树中；</font></li>
<li><font face="宋体"> 一个组中对应的树跟另外组所对应的树没有任何联系；</font></li>
<li><font face="宋体">元素在树中并没有子父级关系的硬性要求。</font></li>
</ul>
<h2 id="并查集的代码实现与测试结果"><a href="#并查集的代码实现与测试结果" class="headerlink" title="并查集的代码实现与测试结果"></a>并查集的代码实现与测试结果</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*
并查集的实现
*/</span>

<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">UF</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span><span class="token operator">*</span> eleAndGroup<span class="token punctuation">;</span>
    <span class="token keyword">int</span> count<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录分组的个数</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">UF</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>count <span class="token operator">=</span> N<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>eleAndGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//初始化eleAndGroup中每个索引是并查集中的每个元素，而eleAndGroup中的每个元素是并查集的分组情况</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            eleAndGroup<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token operator">~</span><span class="token function">UF</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">delete</span> eleAndGroup<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//获取当前并查集中的数据有多少个分组</span>
    <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//获取元素p所在的分组标识</span>
    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> eleAndGroup<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//判断并查集中的元素p和q是否在同一分组中</span>
    <span class="token keyword">bool</span> <span class="token function">connected</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//合并p所在的分组和q元素所在的分组</span>
    <span class="token keyword">void</span> <span class="token function">unionGroup</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">connected</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">//找到p所在的分组标识</span>
        <span class="token keyword">int</span> pGroup <span class="token operator">=</span> eleAndGroup<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//找到q所在的分组标识</span>
        <span class="token keyword">int</span> qGroup <span class="token operator">=</span> eleAndGroup<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//合并组:将p所在的分组所有元素都改为qGroup</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>eleAndGroup<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>eleAndGroup<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>eleAndGroup<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                eleAndGroup<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> qGroup<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//分组个数-1</span>
        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>count<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    UF <span class="token function">uf</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> q<span class="token punctuation">,</span> p<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input two elements:"</span><span class="token punctuation">;</span>
        cin <span class="token operator">>></span> p <span class="token operator">>></span> q<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>uf<span class="token punctuation">.</span><span class="token function">connected</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"两个元素在同一个分组！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        uf<span class="token punctuation">.</span><span class="token function">unionGroup</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"分组个数:"</span> <span class="token operator">&lt;&lt;</span> uf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>uf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="运行的结果："><a href="#运行的结果：" class="headerlink" title="运行的结果："></a>运行的结果：</h4><p><img src="/2021/04/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86/1617851508746.png" alt="Alt text"><br><font face="宋体">可以清楚的看到，在实现unionGroup时候，要想让所有的数据都在一个分组，则需要调用N-1次unionGroup方法才行，而每一次的unionGroup方法里面又有一个for循环来遍历所有的元素，因此整个算法的时间复杂度是O(N^2)，如果要解决大规模问题显然是不合适的。</font></p>
<h4 id="改进的find和unionGroup方法"><a href="#改进的find和unionGroup方法" class="headerlink" title="改进的find和unionGroup方法"></a>改进的find和unionGroup方法</h4><p><font face="宋体">为了提升unionGroup的性能，需要重新设计find方法和union方法。</font></p>
<ul>
<li><font face="宋体">仍然让eleAndGroup数组的索引作为某个结点的元素；</font></li>
<li><font face="宋体">eleAndGroup中的值不再是当前结点所在分组的标识，而是该结点的父结点。</font></li>
</ul>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*
并查集的实现
*/</span>

<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">UF</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span><span class="token operator">*</span> eleAndGroup<span class="token punctuation">;</span>
    <span class="token keyword">int</span> count<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录分组的个数</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">UF</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>count <span class="token operator">=</span> N<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>eleAndGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//初始化eleAndGroup中每个索引是并查集中的每个元素，而eleAndGroup中的每个元素是并查集的分组情况</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            eleAndGroup<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token operator">~</span><span class="token function">UF</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">delete</span> eleAndGroup<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//获取当前并查集中的数据有多少个分组</span>
    <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//获取元素p所在的分组标识</span>
    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//return eleAndGroup[p];</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> eleAndGroup<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> p<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            p <span class="token operator">=</span> eleAndGroup<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//判断并查集中的元素p和q是否在同一分组中</span>
    <span class="token keyword">bool</span> <span class="token function">connected</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//合并p所在的分组和q元素所在的分组</span>
    <span class="token keyword">void</span> <span class="token function">unionGroup</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//if (connected(p, q)) {</span>
        <span class="token comment" spellcheck="true">//    return;</span>
        <span class="token comment" spellcheck="true">//}</span>

        <span class="token comment" spellcheck="true">////找到p所在的分组标识</span>
        <span class="token comment" spellcheck="true">//int pGroup = eleAndGroup[p];</span>

        <span class="token comment" spellcheck="true">////找到q所在的分组标识</span>
        <span class="token comment" spellcheck="true">//int qGroup = eleAndGroup[q];</span>

        <span class="token comment" spellcheck="true">////合并组:将p所在的分组所有元素都改为qGroup</span>
        <span class="token comment" spellcheck="true">//for (int i = 0; i &lt; sizeof(eleAndGroup) / sizeof(eleAndGroup[0]); i++) {</span>
        <span class="token comment" spellcheck="true">//    if (eleAndGroup[i] == pGroup) {</span>
        <span class="token comment" spellcheck="true">//        eleAndGroup[i] = qGroup;</span>
        <span class="token comment" spellcheck="true">//    }</span>
        <span class="token comment" spellcheck="true">//}</span>
        <span class="token comment" spellcheck="true">////分组个数-1</span>
        <span class="token comment" spellcheck="true">//this->count--;</span>

        <span class="token keyword">int</span> pRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> qRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>pRoot <span class="token operator">==</span> qRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">//让p所在的树的根结点指向q所在树的根结点</span>
        eleAndGroup<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">=</span> qRoot<span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>count<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font face="宋体">目前优化后的方法还是存在一个问题，要让并查集中所有的数据连通，任然需要调用N-1次unionGroup方法。虽然unionGroup方法的时间复杂度变为了O(N)，但是修改的find方法在最坏的情况下的时间复杂度是O(N)。我们知道，当树的高度越低，查找的速度越快，因此为了避免find方法的最坏情况发生，考虑使用路径压缩来降低树的高度。</font></p>
<h4 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h4><p><font face="宋体">其实很简单，我们在处理两棵树合并的时候是直接将某棵树的根结点指向另一棵树的叶子结点，这就导致树的高度增加。为了避免这种情况，需要在合并两棵树的时候考察一下那棵树比较高，然后把较低的那棵树的根结点指向较高树的根结点即可。<br></font></p>
<h5 id="代码实现如下："><a href="#代码实现如下：" class="headerlink" title="代码实现如下："></a>代码实现如下：</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*
并查集的实现
*/</span>

<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">UF_Tree_Weighted</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span><span class="token operator">*</span> eleAndGroup<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录结点元素和该元素所在的分组标识</span>
    <span class="token keyword">int</span> count<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录分组的个数</span>
    <span class="token keyword">int</span><span class="token operator">*</span> sz<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用来存储每个根结点对应的树中保存的结点个数</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">UF_Tree_Weighted</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>count <span class="token operator">=</span> N<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>eleAndGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//初始化eleAndGroup中每个索引是并查集中的每个元素，而eleAndGroup中的每个元素是并查集的分组情况</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            eleAndGroup<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>sz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//默认情况下，sz中每个索引处的值都是1</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sz<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token operator">~</span><span class="token function">UF_Tree_Weighted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">delete</span> eleAndGroup<span class="token punctuation">;</span>
        <span class="token keyword">delete</span> sz<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//获取当前并查集中的数据有多少个分组</span>
    <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//获取元素p所在的分组标识</span>
    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//return eleAndGroup[p];</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> eleAndGroup<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> p<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            p <span class="token operator">=</span> eleAndGroup<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//判断并查集中的元素p和q是否在同一分组中</span>
    <span class="token keyword">bool</span> <span class="token function">connected</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//合并p所在的分组和q元素所在的分组</span>
    <span class="token keyword">void</span> <span class="token function">unionGroup</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> pRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> qRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>pRoot <span class="token operator">==</span> qRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>sz<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">></span> sz<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            eleAndGroup<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span> <span class="token operator">=</span> pRoot<span class="token punctuation">;</span>
            sz<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sz<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            eleAndGroup<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span> <span class="token operator">=</span> qRoot<span class="token punctuation">;</span>
            sz<span class="token punctuation">[</span>qRoot<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> sz<span class="token punctuation">[</span>pRoot<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>count<span class="token operator">--</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    UF_Tree_Weighted <span class="token function">uf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> q<span class="token punctuation">,</span> p<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input two elements:"</span><span class="token punctuation">;</span>
        cin <span class="token operator">>></span> p <span class="token operator">>></span> q<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>uf<span class="token punctuation">.</span><span class="token function">connected</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"两个元素在同一个分组！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        uf<span class="token punctuation">.</span><span class="token function">unionGroup</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"分组个数:"</span> <span class="token operator">&lt;&lt;</span> uf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>uf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈动态规划</title>
    <url>/2021/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="动态规划的定义"><a href="#动态规划的定义" class="headerlink" title="动态规划的定义"></a>动态规划的定义</h2><p><font face="宋体"></font></p>
<h2 id="动态规划题目的特点"><a href="#动态规划题目的特点" class="headerlink" title="动态规划题目的特点"></a>动态规划题目的特点</h2><ul>
<li><font face="宋体">1.计数</font></li>
</ul>
<p><img src="/2021/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20210419095929404.png" alt="image-20210419095929404"></p>
<ul>
<li><font face="宋体">2.求最大最小值</font></li>
</ul>
<p><img src="/2021/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20210419100005517.png" alt="image-20210419100005517"></p>
<ul>
<li><font face="宋体">3.求存在性</font></li>
</ul>
<p><img src="/2021/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20210419100052297.png" alt="image-20210419100052297"></p>
<h2 id="例题讲解："><a href="#例题讲解：" class="headerlink" title="例题讲解："></a>例题讲解：</h2><blockquote>
<p>题目来源于lintcode669：<a href="https://www.lintcode.com/problem/669/">https://www.lintcode.com/problem/669/</a></p>
</blockquote>
<h3 id="lintcode-669（换硬币）"><a href="#lintcode-669（换硬币）" class="headerlink" title="lintcode_669（换硬币）"></a>lintcode_669（换硬币）</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p><font face="宋体">给出不同面额的硬币以及一个总金额. 写一个方法来计算给出的总金额可以换取的最少的硬币数量. 如果已有硬币的任意组合均无法与总金额面额相等, 那么返回 <code>-1</code>.</font></p>
<p><img src="/2021/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20210419100529769.png" alt="image-20210419100529769"></p>
<h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><p><img src="/2021/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20210419100602843.png" alt="image-20210419100602843"></p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*INT_MAX表示int类型最大的数，需要调用limits.h*/</span>
<span class="token comment" spellcheck="true">/*
int->INT_MAX
unsigned int ->UINT_MAX
long->LONG_MAX
unsigned long->ULONG_MAX
*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment" spellcheck="true">/**
     * @param coins: a list of integer
     * @param amount: a total amount of money amount
     * @return: the fewest number of coins that you need to make up
     */</span>
    <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>coins<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// write your code here</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>amount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">==</span> INT_MAX<span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>红黑树</title>
    <url>/2021/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
    <content><![CDATA[<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p><font face="宋体">红黑树是基于2-3树思想的内含有红黑链的二叉查找树，并满足以下三种条件：<br></font></p>
<ul>
<li><font face="宋体">1. 红色链接必须是左链接；</font></li>
<li> <font face="宋体">2. 任何一个结点不可能有两个红色链接；</font><span id="more"></span></li>
<li> <font face="宋体">3. 该树是完美黑色匹配，也即任意的空连到根结点的路径上的黑链接数目是相同的。</font></li>
</ul>
<h3 id="红黑树的一些基本操作"><a href="#红黑树的一些基本操作" class="headerlink" title="红黑树的一些基本操作"></a>红黑树的一些基本操作</h3><h4 id="1-左旋"><a href="#1-左旋" class="headerlink" title="1. 左旋"></a>1. 左旋</h4><p><font face="宋体">当某个结点的左子结点的链接是黑色的，而其右子结点是红色的（不满足定义中的第一个条件）则需要对其进行左旋操作。</font><br><font face="宋体"><br>左旋的过程（前提条件当前结点为h，而其右子结点为x）：</font></p>
<ul>
<li><font face="宋体">1. 让x的左子结点成为h的右子结点；</font></li>
<li> <font face="宋体">2. 让h成为x的左子结点；</font></li>
<li> <font face="宋体">3. 让h的color属性成为x的color属性；</font></li>
<li> <font face="宋体">4. 让h的color属性置为红色。</font></li>
</ul>
<p><img src="/2021/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91/1617693263761.png" alt="Alt text"></p>
<h4 id="2-右旋"><a href="#2-右旋" class="headerlink" title="2.右旋"></a>2.右旋</h4><p><font face="宋体">当某个结点的左子结点的链接是红色的，而其左子结点的左子结点也是红色的（不满足定义中的第二个条件）则需要对其进行右旋操作。</font><br><font face="宋体"><br>右旋的过程（前提条件当前结点为h，而其左子结点为x）：</font></p>
<ul>
<li><font face="宋体">1. 让x的右子结点成为h的左子结点；</font></li>
<li> <font face="宋体">2. 让h成为x的右子结点；</font></li>
<li> <font face="宋体">3. 让h的color属性成为x的color属性；</font></li>
<li> <font face="宋体">4. 让h的color属性置为红色。</font><br><img src="/2021/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91/1617693449983.png" alt="Alt text"></li>
</ul>
<h4 id="3-颜色反转"><a href="#3-颜色反转" class="headerlink" title="3.颜色反转"></a>3.颜色反转</h4><p><font face="宋体">当某个结点的左子结点的链接是红色的，而其右子结点也是红色的，则需要将其两个子结点的链接设置为黑色，而其父链接设置为红色。</font><br><img src="/2021/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91/1617693520319.png" alt="Alt text"></p>
<h3 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*
红黑树的CPP实现
*/</span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Value</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    Key key<span class="token punctuation">;</span>
    Value value<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//记录左子结点和右子结点</span>
    Node<span class="token operator">*</span> left<span class="token punctuation">;</span>
    Node<span class="token operator">*</span> right<span class="token punctuation">;</span>

    <span class="token keyword">bool</span> color<span class="token punctuation">;</span>

    <span class="token function">Node</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">,</span> Node<span class="token operator">*</span> left<span class="token punctuation">,</span> Node<span class="token operator">*</span> right<span class="token punctuation">,</span> <span class="token keyword">bool</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Value</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">RedBlackTree</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    Node<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Value<span class="token operator">></span><span class="token operator">*</span> root<span class="token punctuation">;</span>
    <span class="token keyword">int</span> N<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//红黑树标识： 红 RED true， 黑 BLACK false</span>
    <span class="token keyword">const</span> <span class="token keyword">bool</span> RED <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">bool</span> BLACK <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">RedBlackTree</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span><span class="token operator">*</span> left<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span><span class="token operator">*</span> right<span class="token punctuation">,</span> <span class="token keyword">bool</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>root <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>N <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token operator">~</span><span class="token function">RedBlackTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">delete</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">//获取树中元素的个数</span>
    <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> N<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//判断当前结点的父指向链接是否为红色</span>
    <span class="token keyword">bool</span> <span class="token function">isRed</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span><span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> x<span class="token operator">-</span><span class="token operator">></span>color <span class="token operator">==</span> RED<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//左旋操作</span>
    Node<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span><span class="token operator">*</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span><span class="token operator">*</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//获取h结点的右子结点x</span>
        Node<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span><span class="token operator">*</span> x <span class="token operator">=</span> h<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//让x结点的左子结点成为h结点的右子结点</span>
        h<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> x<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//让h结点成为x的左子结点</span>
        x<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> h<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//让x结点的color属性等于h结点的color属性</span>
        x<span class="token operator">-</span><span class="token operator">></span>color <span class="token operator">=</span> h<span class="token operator">-</span><span class="token operator">></span>color<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//让h结点的color成为红色</span>
        h<span class="token operator">-</span><span class="token operator">></span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>

        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//右旋操作</span>
    Node<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Value<span class="token operator">></span><span class="token operator">*</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span><span class="token operator">*</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//获取h结点的左子结点x</span>
        Node<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span><span class="token operator">*</span> x <span class="token operator">=</span> h<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//让x的右子结点成为h的左子结点</span>
        h<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> x<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//让h成为x的右子结点</span>
        x<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> h<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//让x结点的color属性等于h结点的color属性</span>
        x<span class="token operator">-</span><span class="token operator">></span>color <span class="token operator">=</span> h<span class="token operator">-</span><span class="token operator">></span>color<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//让h结点的color成为红色</span>
        h<span class="token operator">-</span><span class="token operator">></span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>

        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//颜色变换</span>
    <span class="token keyword">void</span> <span class="token function">flipColors</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span><span class="token operator">*</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        h<span class="token operator">-</span><span class="token operator">></span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>

        h<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">-</span><span class="token operator">></span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>
        h<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">-</span><span class="token operator">></span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Key key1<span class="token punctuation">,</span> Key key2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
        <span class="token keyword">return</span> key1 <span class="token operator">-</span> key2<span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//在指定的树中完成插入操作，并返回添加元素后新的树</span>
    Node<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span><span class="token operator">*</span> <span class="token function">put</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span><span class="token operator">*</span> h<span class="token punctuation">,</span> Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//若h为空，则直接返回一个红色的结点即可</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            N<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> Node<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> RED<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        
        <span class="token keyword">int</span> cmp <span class="token operator">=</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> h<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//继续往左</span>
            h<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>h<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//继续往右</span>
            h<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>h<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            h<span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">//进行左旋</span>
        <span class="token comment" spellcheck="true">//当当前结点的左子结点为黑色，而右子结点为红色</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            h <span class="token operator">=</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">//进行右旋</span>
        <span class="token comment" spellcheck="true">//当当前结点的左子结点为红色，而其左子结点的左子结点也为红色</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            h <span class="token operator">=</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">//颜色反转：当前结点的左子结点和右子结点都为红色</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>h<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">flipColors</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">return</span> h<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//在整棵树上完成插入操作</span>
    <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Value value<span class="token punctuation">)</span><span class="token punctuation">{</span>
        root <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//根结点的颜色永远是黑色</span>
        root<span class="token operator">-</span><span class="token operator">></span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    
    <span class="token comment" spellcheck="true">//从指定的树x中查找key对应的值</span>
    Value <span class="token function">get</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Value<span class="token operator">></span><span class="token operator">*</span> x<span class="token punctuation">,</span> Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//C6387</span>
            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">//比较x结点的键和key的大小</span>
        
        <span class="token keyword">int</span> cmp <span class="token operator">=</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> x<span class="token operator">-</span><span class="token operator">></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> x<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//根据key从书中找到对应的值</span>
    Value <span class="token function">get</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RedBlackTree<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span> <span class="token function">tree</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Tim"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Smith"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    string str1 <span class="token operator">=</span> tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    string str2 <span class="token operator">=</span> tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> str2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    string str3 <span class="token operator">=</span> tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> str3<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="执行结果如下："><a href="#执行结果如下：" class="headerlink" title="执行结果如下："></a>执行结果如下：</h4><p><img src="/2021/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91/1617693579337.png" alt="Alt text"></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈DFS</title>
    <url>/2021/04/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88DFS/</url>
    <content><![CDATA[<blockquote>
<p>待更…</p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈贪心算法</title>
    <url>/2021/04/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>参考博客“从零开始学贪心算法”，主要是为了学习并记录这个过程，博客地址为：<a href="https://blog.csdn.net/qq_32400847/article/details/51336300?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161819966416780357242016%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161819966416780357242016&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-51336300.first_rank_v2_pc_rank_v29&amp;utm_term=%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95">https://blog.csdn.net/qq_32400847/article/details/51336300?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161819966416780357242016%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161819966416780357242016&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-51336300.first_rank_v2_pc_rank_v29&amp;utm_term=%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95</a></p>
</blockquote>
<h2 id="贪心算法的定义"><a href="#贪心算法的定义" class="headerlink" title="贪心算法的定义"></a>贪心算法的定义</h2><p><font face="宋体">贪心算法是指在对问题求解时，总是得到当前看来最好的结果，从而达到最终的结果最好。也即是求取局部最优，从而达到全局最优。选择贪心策略必须具备无后效性，也就是某个状态以前的过程不会影响以后的状态。</font></p>
<h3 id="问题1-：活动选择问题"><a href="#问题1-：活动选择问题" class="headerlink" title="问题1 ：活动选择问题"></a>问题1 ：活动选择问题</h3><p><font face="宋体">活动选择问题一直是我们生活当中经常会遇到的问题，例如有多个活动需要使用同一个教室等等，那如何使得这些活动尽可能多的被安排而不相互冲突呢？</font></p>
<p><font face="宋体">假设有11个活动，分别为act_1,act_2,act_3,…,act_11,请尽量安排尽可能多的活动而不会冲突，如下表格所示：</font></p>
<table>
<thead>
<tr>
<th>活动</th>
<th align="center">act_1</th>
<th>act_2</th>
<th>act_3</th>
<th>act_4</th>
<th>act_5</th>
<th>act_6</th>
<th>act_7</th>
<th>act_8</th>
<th>act_9</th>
<th>act_10</th>
<th>act_11</th>
</tr>
</thead>
<tbody><tr>
<td>start</td>
<td align="center">1</td>
<td>3</td>
<td>0</td>
<td>5</td>
<td>3</td>
<td>5</td>
<td>6</td>
<td>8</td>
<td>8</td>
<td>2</td>
<td>12</td>
</tr>
<tr>
<td>end</td>
<td align="center">4</td>
<td>5</td>
<td>6</td>
<td>7</td>
<td>8</td>
<td>9</td>
<td>10</td>
<td>11</td>
<td>12</td>
<td>13</td>
<td>14</td>
</tr>
</tbody></table>
<h4 id="实现代码如下："><a href="#实现代码如下：" class="headerlink" title="实现代码如下："></a>实现代码如下：</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*
活动选择问题
*/</span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//利用结构体定义事件</span>
<span class="token keyword">struct</span> Act <span class="token punctuation">{</span>
    <span class="token keyword">int</span> start<span class="token punctuation">;</span>
    <span class="token keyword">int</span> end<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token comment" spellcheck="true">//比较结束时间</span>
<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Act a<span class="token punctuation">,</span> Act b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>end <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>end<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//利用贪心算法求取合适的事件安排顺序，并返回安排事件的数量</span>
<span class="token keyword">int</span> <span class="token function">greedy_activity_selector</span><span class="token punctuation">(</span>Act<span class="token operator">*</span> act_e<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>act_e<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>start <span class="token operator">>=</span> act_e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            i <span class="token operator">=</span> j<span class="token punctuation">;</span>
            num<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> N<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input the number of events: "</span><span class="token punctuation">;</span>
    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>


    <span class="token comment" spellcheck="true">//事先定义可以存储200个事件的结构体</span>
    Act act<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> act<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start <span class="token operator">>></span> act<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">greedy_activity_selector</span><span class="token punctuation">(</span>act<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The number of scheduled events is "</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="运行的结果如下所示："><a href="#运行的结果如下所示：" class="headerlink" title="运行的结果如下所示："></a>运行的结果如下所示：</h5><p><img src="/2021/04/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20210412175109507.png" alt="image-20210412175109507"></p>
<h3 id="问题2：-钱币找零"><a href="#问题2：-钱币找零" class="headerlink" title="问题2： 钱币找零"></a>问题2： 钱币找零</h3><p><font face="宋体">钱币找零也是我们生活当中经常遇到的问题，除了特别的要求，我们一般都是尽量用面额较大的钱币去处理找零问题。而且贪心算法也是这种思想，每一步用尽可能大的面额纸币。</font></p>
<h4 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*
钱币找零
*/</span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> moneyCount <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> moneyNum <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> moneyNum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> cNum <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>money <span class="token operator">/</span> moneyNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> moneyCount<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        money <span class="token operator">-</span><span class="token operator">=</span> cNum <span class="token operator">*</span> moneyNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        num <span class="token operator">+</span><span class="token operator">=</span> cNum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> money<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input the denomination of coin: "</span><span class="token punctuation">;</span>
    cin <span class="token operator">>></span> money<span class="token punctuation">;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Result:"</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h5><p><img src="/2021/04/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20210412210023292.png" alt="image-20210412210023292"></p>
<blockquote>
<p>待更……</p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈快速排序和归并排序</title>
    <url>/2021/04/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%92%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<p><font face="宋体">参考了《算法图解》和黑马的数据结构与算法的笔记。</font></p>
</blockquote>
<h2 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h2><p><font face="宋体">快速排序是对冒泡排序的改进，是一种典型的分而治之(divide and conquer, D&amp;C)算法。其思想是：在任意选取一个基准元素后，遍历一遍所有的元素并将所有元素分成独立的两个部分，其中一部分的任意一个元素都要比该基准要小，而另外一个组的任意一个元素要比这个基准要大，然后再对这两个部分进行同样的操作：选取基准并交换两边的元素，使得一边的元素都要比基准要小而另外一边要比基准要大，依次类推，最终使得整个队列有序。可以递归进行该操作。</font></p>
<span id="more"></span>
<h3 id="排序的原理："><a href="#排序的原理：" class="headerlink" title="排序的原理："></a>排序的原理：</h3><ul>
<li><font face="宋体">1.首先任意选取一个分界值，能够通过该分界值将所有的元素分成两个独立的部分；</font></li>
<li><font face="宋体">2.将大于该分界值的所有元素放在数组的右边，而小于该分界值的所有元素放在数组的左边；</font></li>
<li><font face="宋体">3.然后左右两边的数组又可以独立进行排序，在左侧的数组中任意选取一个分界值，并将该数组中所有大于该分界值的元素放在数组的右边，而小于该分界值的元素放在数组的左边。对于右侧的数组可以同样进行该操作；</font></li>
<li><font face="宋体">4.重复上面的过程（可以利用递归）。通过递归将左右两侧的数组都排序好后，整个数组也就有序了。</font></li>
</ul>
<h3 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*
快速排序的CPP实现
*/</span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">compare</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">exch</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        T temp <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        v<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token function">partion</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> l_left <span class="token operator">=</span> low<span class="token punctuation">;</span>
        <span class="token keyword">int</span> l_right <span class="token operator">=</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compare</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token operator">--</span>l_right<span class="token punctuation">,</span> low<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>l_right <span class="token operator">==</span> low<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token operator">++</span>l_left<span class="token punctuation">,</span> low<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>l_left <span class="token operator">==</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>l_left <span class="token operator">&lt;</span> l_right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">exch</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> l_left<span class="token punctuation">,</span> l_right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>


        <span class="token punctuation">}</span>
        <span class="token function">exch</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> low<span class="token punctuation">,</span> l_right<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> l_right<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">>=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> pa <span class="token operator">=</span> <span class="token function">partion</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pa <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> pa <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> high <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">456</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">146</span><span class="token punctuation">,</span><span class="token number">849</span><span class="token punctuation">,</span><span class="token number">158</span><span class="token punctuation">,</span><span class="token number">8169</span><span class="token punctuation">,</span><span class="token number">153</span><span class="token punctuation">,</span><span class="token number">8489</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    QuickSort<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator iter <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter <span class="token operator">!=</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter<span class="token operator">++</span><span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>iter <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="运行的结果如下："><a href="#运行的结果如下：" class="headerlink" title="运行的结果如下："></a>运行的结果如下：</h4><p><img src="/2021/04/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%92%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1617885506406.png" alt="Alt text"></p>
<h2 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h2><p><font face="宋体">归并排序是一种建立在归并操作的有效的排序算法，也是一种典型的D&amp;C算法。其思想是：先将序列拆分成单个元素，然后将元素合并成有序的子序列，再将有序的子序列合并成一个有序的表。</font></p>
<h3 id="排序的原理：-1"><a href="#排序的原理：-1" class="headerlink" title="排序的原理："></a>排序的原理：</h3><ul>
<li><font face="宋体">1.尽可能将数据拆分成两个元素相等的子组，并对子组进一步拆分，至每个子组中的元素个数为1；</font></li>
<li><font face="宋体">2.将相邻的两个子组合并成一个有序的大组；</font></li>
<li><font face="宋体">3.不断的重复2，直到只有一个组为止。</font><h3 id="实现代码：-1"><a href="#实现代码：-1" class="headerlink" title="实现代码："></a>实现代码：</h3></li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*
归并排序CPP实现
*/</span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">MergeSort</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    T<span class="token operator">*</span> assist<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> <span class="token function">compare</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> l_left <span class="token operator">=</span> low<span class="token punctuation">;</span>
        <span class="token keyword">int</span> l_right <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> low<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>l_left <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> l_right <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> l_left<span class="token punctuation">,</span> l_right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                assist<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>l_left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                assist<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>l_right<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>l_left <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            assist<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>l_left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>l_right <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            assist<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>l_right<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> high<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> assist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">>=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">merge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
        <span class="token keyword">int</span> high <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        assist <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">456</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">146</span><span class="token punctuation">,</span><span class="token number">849</span><span class="token punctuation">,</span><span class="token number">158</span><span class="token punctuation">,</span><span class="token number">8169</span><span class="token punctuation">,</span><span class="token number">153</span><span class="token punctuation">,</span><span class="token number">8489</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    MergeSort<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator iter <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter <span class="token operator">!=</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter<span class="token operator">++</span><span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>iter <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="运行的结果如下：-1"><a href="#运行的结果如下：-1" class="headerlink" title="运行的结果如下："></a>运行的结果如下：</h4><p><img src="/2021/04/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%92%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1617887489715.png" alt="Alt text"></p>
<h2 id="快速排序与归并排序的时间复杂度分析"><a href="#快速排序与归并排序的时间复杂度分析" class="headerlink" title="快速排序与归并排序的时间复杂度分析"></a>快速排序与归并排序的时间复杂度分析</h2><p><font face="宋体">归并排序的时间复杂度是O(N<em>logN)。而快速排序在一般情况下的时间复杂度是O(N</em>logN)，但是在比较糟糕的情况下的时间复杂度是O(N^2)。</font></p>
<blockquote>
<font face="宋体">
那什么是快速排序的糟糕情况呢？</font>
</blockquote>
<font face="宋体">
其实，正如前面看到的，快速排序依赖你所选取的基准值，假如你每次选取的基准值都是最小的那一个，最后分组的时候，只有一边有元素，而另外一边没有元素。（看下面这张图）</font>


<p><img src="/2021/04/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%92%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1617887997615.png" alt="Alt text"></p>
<p><font face="宋体">注意，数组并没有像如期那样分为两部分，相反，其中一个数组永远都是空的，这就会导致调用栈非常长。在这种情况下，栈长为O(N)，在调用栈的每一层都涉及O(N)个元素，因此此时的时间复杂度是O(N^2)。（看下面这张图）<br></font></p>
<p><img src="/2021/04/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E8%B0%88%E8%B0%88%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%92%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1617888304641.png" alt="Alt text"></p>
<p><font face="宋体">一般情况下，选取的元素能够将数组分为两个部分，此时栈长为O(logN)，因此此时的时间复杂度为O(N*logN)。</font></p>
<blockquote>
<font face="宋体">
既然快排会存在这种糟糕的情况，而归并排序的时间复杂度一直是O(N\* logN)，为什么不考虑一直用归并排序呢？</font>
</blockquote>
<p><font face="宋体">其实，在一般情况下，虽然快速排序和归并排序的时间复杂度一直是O(N<em>logN)，但是快速排序和归并排序之间还相差了一个常量时间，也就是前面的系数O(l</em>N*logN)。快速排序的l要比归并排序的l要小，因此，综合来看还是快速排序的速度要更快一些。</font></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找类</title>
    <url>/2021/04/14/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="算法解释"><a href="#算法解释" class="headerlink" title="算法解释"></a>算法解释</h2><p><font face="宋体">二分查找也叫二分法或者折半查找，每次将待查找到的区间分成两个部分，只取其中一个部分进行查找，可以将查找的时间复杂度大大降低。对于一个长度为O(N)的数组，采用二分查找的时间复杂度是O(logN)。但是二分查找只能应用于有序的数组。</font></p>
<h2 id="LeetCode69"><a href="#LeetCode69" class="headerlink" title="LeetCode69:"></a>LeetCode69:</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><font face="宋体">实现 int sqrt(int x) 函数。计算并返回 x 的平方根，其中 x 是非负整数。由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</font></p>
<p><img src="/2021/04/14/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%B1%BB/image-20210414101142723.png" alt="image-20210414101142723"></p>
<h3 id="题解思路："><a href="#题解思路：" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">直接使用二分查找来解决这个题目是非常不错的一种选择。这里提供了两种实现二分查找的方法，一个是使用循环，还有一个是使用递归。</font></p>
<p><font face="宋体">其实这道题还有一个解法，使用牛顿迭代法。这道题可以看成是$h(x)=x^2-a=0$</font>，函数的切线斜率是$2x$，代入$x=h(x)/2x$中，得到迭代公式为$x_{n+1}=(x_{n}+a/x_{n})/2$。</p>
<p><img src="/2021/04/14/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%B1%BB/image-20210414105521948.png" alt="image-20210414105521948"></p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*循环实现二分查找*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> low<span class="token punctuation">,</span> <span class="token keyword">long</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">></span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
             <span class="token keyword">long</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
             <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">*</span>mid <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
                 <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
             <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">*</span>mid <span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
                 high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                 low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">></span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">*</span>low <span class="token operator">></span> x <span class="token operator">&amp;&amp;</span> high<span class="token operator">*</span>high <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> high<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*递归实现二分查找*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> low<span class="token punctuation">,</span> <span class="token keyword">long</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">></span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> high<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">long</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">*</span>mid <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">*</span>mid <span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-c++"><code class="language-c++">/*牛顿迭代法*/
class Solution {
public:
    int mySqrt(int x) {
        long a = x;
        while(a*a>x){
            a = (a+x/a)/2;
        }
        return a;
    }
};
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode34"><a href="#LeetCode34" class="headerlink" title="LeetCode34:"></a>LeetCode34:</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><font face="宋体">给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。如果数组中不存在目标值 target，返回 [-1, -1]。</font></p>
<p><img src="/2021/04/14/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%B1%BB/image-20210414105851963.png" alt="image-20210414105851963"></p>
<h3 id="题解思路：-1"><a href="#题解思路：-1" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">其实这道题细想一下思想还是挺简单的，可以直接定义两个指针，一个指向数组的最左边，一个指向数组的最右边，分别考察具体情况调整指针。</font></p>
<blockquote>
<p>类二分查找方法有待考虑……</p>
</blockquote>
<h3 id="代码如下：-1"><a href="#代码如下：-1" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*双指针方法*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">searchRange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
        <span class="token keyword">int</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">{</span>low<span class="token punctuation">,</span>high<span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                low<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                high<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                low<span class="token operator">++</span><span class="token punctuation">;</span>
                high<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*二分查找*/</span>
<span class="token comment" spellcheck="true">//待更......leetcode_35</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="LeetCode81"><a href="#LeetCode81" class="headerlink" title="LeetCode81:"></a>LeetCode81:</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><font face="宋体">已知存在一个按非降序排列的整数数组 nums ，数组中的值不必互不相同。在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;= k &lt; nums.length）上进行了 旋转 ，使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,4,4,5,6,6,7] 在下标 5 处经旋转后可能变为 [4,5,6,6,7,0,1,2,4,4] 。给你 旋转后 的数组 nums 和一个整数 target ，请你编写一个函数来判断给定的目标值是否存在于数组中。如果 nums 中存在这个目标值 target ，则返回 true ，否则返回 false 。</font></p>
<h3 id="题解思路：-2"><a href="#题解思路：-2" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">第一种方法是利用双指针的方法，分别遍历数组的左右两边，如果有发现目标值就输出为true，若未发现就输出为false。</font></p>
<p><font face="宋体">该题的第二种思路是利用二分查找。可以肯定的是，在给定的数组之前，也就是未经过翻转时是有序的，现在要确定的是翻转点哪一边是有序的，就在哪一边进行二分查找。这种翻转的数组有三种情况。</font></p>
<ul>
<li><font face="宋体">第一种：当$nums[low]==nums[mid]$，举个例子：10111和11101这种，分不清到底是前面有序还是后面有序，此时low++即可。相当于去掉了一个重复的干扰项。 </font></li>
<li><font face="宋体">第二种：当$nums[low]&lt;nums[mid]$，前半部分是有序的，如果target的值在前半部分内，就可以在前半部分中查找，否则去后半部分查找。 </font></li>
<li><font face="宋体">第三种：当$nums[low]&gt;nums[mid]$，后半部分有序，如果target在后半部分内，就在后半部分中开启二分查找，否则就在前半部分查找。 </font></li>
</ul>
<h3 id="代码如下：-2"><a href="#代码如下：-2" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*双指针方法*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token operator">||</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                low<span class="token operator">++</span><span class="token punctuation">;</span>
                high<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*局部二分查找*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//无法判断哪个区间为递增</span>
                <span class="token operator">++</span>low<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//后半部是有序的</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">>=</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//前半部分是有序的</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token operator">&lt;=</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode153-Medium"><a href="#LeetCode153-Medium" class="headerlink" title="LeetCode153(Medium):"></a>LeetCode153(Medium):</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><font face="宋体">已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 <strong>旋转</strong> 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：</font></p>
<ul>
<li><p><font face="宋体">若旋转 4 次，则可以得到 [4,5,6,7,0,1,2];</font></p>
</li>
<li><p><font face="宋体">若旋转 7 次，则可以得到 [0,1,2,4,5,6,7];</font></p>
<p><font face="宋体">注意，数组 [a[0], a[1], a[2], …, a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], …, a[n-2]] 。</font></p>
</li>
</ul>
<p><font face="宋体">给你一个元素值<strong>互不相同</strong>的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 <strong>最小元素</strong> 。</font></p>
<p><img src="/2021/04/14/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%B1%BB/image-20210415105137231.png" alt="leetcode153"></p>
<h3 id="题解思路：-3"><a href="#题解思路：-3" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这个题是leetcode中被标注medium类型的题目，其实细想一下，就是找到这个数组中的最小值即可。那问题就变得容易了，直接声明一个最小值的指针，初始指向数组的第一个，然后遍历完数组中的所有元素，记录最小值所在的索引即可。（方法一）</font></p>
<p><font face="宋体">我们再来看看这个题想考什么，首先应该明确的是在未反转时候是有序的（递增），翻转几次就是向右循环几次。这道题还是可以用二分查找来解决，在用二分查找时，需要始终将目标值（这里是最小值）套住，并不断收缩左边界或右边界。如何进行二分查找呢？</font></p>
<ul>
<li>将中值与数组最右边的值进行比较，如果中值&gt;右值的，则最小值在右边，对右边进行二分查找；</li>
<li>若中值&lt;右值，则最小值在左边，对数组的左边进行二分查找。需要注意的是，中值是靠近左值的，因此要将中值放在左值范围考虑。</li>
</ul>
<p><font face="宋体">需要弄明白的是，在方法二中，这里为什么一直是和最右边的值进行比较，而不是最左边的值进行比较。与最左边的值进行比较会有什么问题？</font></p>
<blockquote>
<p>参考LeetCode_153中，armeria对于此题的题解。</p>
</blockquote>
<p><font face="宋体">对于本题而言，翻转的数组只会有下面几种情况（左值是数组最左边的值，右值是数组最右边的值，而且在数组有翻转的时候，左值一直是大于右值的）：</font></p>
<p><img src="/2021/04/14/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%B1%BB/image-20210415160054652.png" alt="image-20210415160054652"></p>
<p><font face="宋体">看上面这张图，如果选择中值和左值进行比较，当出现1和3时，就无法确定最小值是在哪一边了，而与右值比较时，情况就会变得简单。到底能不能用最左边的值进行比较呢？答案是可以的，但不是找最小值了，而是找最大值。当然，对于这个题目而言，最大值往往跟最小值是挨着的，如果找到了最大值，索引后偏一位就是最小值的索引。见方法三。</font></p>
<h3 id="代码如下：-3"><a href="#代码如下：-3" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*方法一*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> minValue <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            minValue <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>minValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> minValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*方法二*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//这里若取等号，会陷入死循环</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> low<span class="token operator">+</span><span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                high <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//这里返回low、high索引的都可以</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*方法三*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 先加一再除，mid更靠近右边的right */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">/* 向右移动左边界 */</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">/* 向左移动右边界 */</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token punctuation">(</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 最大值向右移动一位就是最小值了（需要考虑最大值在最右边的情况，右移一位后对数组长度取余） */</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode154-Hard"><a href="#LeetCode154-Hard" class="headerlink" title="LeetCode154(Hard):"></a>LeetCode154(Hard):</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><font face="宋体">已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 <strong>旋转</strong> 后，得到输入数组。例如，原数组 nums = [0,1,4,4,5,6,7] 在变化后可能得到：</font></p>
<ul>
<li><p><font face="宋体">若旋转 4 次，则可以得到 [4,5,6,7,0,1,4];</font></p>
</li>
<li><p><font face="宋体">若旋转 7 次，则可以得到 [0,1,4,4,5,6,7];</font></p>
<p><font face="宋体">注意，数组 [a[0], a[1], a[2], …, a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], …, a[n-2]] 。</font></p>
</li>
</ul>
<p><font face="宋体">给你一个可能存在 <strong>重复</strong> 元素值的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。</font></p>
<p><img src="/2021/04/14/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%B1%BB/image-20210415102834651.png" alt="leetcode_154"></p>
<h3 id="题解思路：-4"><a href="#题解思路：-4" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这个题是leetcode中被标注hard类型的题目，其实细想一下，就是找到这个数组中的最小值即可。那问题就变得容易了，直接声明一个最小值的指针，初始指向数组的第一个，然后遍历完数组中的所有元素，记录最小值所在的索引即可。（方法一）</font></p>
<p><font face="宋体">这道题在基于leetcode_153上添加了数组可能有重复值的情况，按照上一题的处理方法，中值大于右值在右边寻找最小值，当中值小于右值时在左边寻找最小值，如何处理中值等于右值的情况呢？其实，可以看上面的示例2，当中值等于右值时的情况为：$[0, 1, 2, 2, 2]$，最小值是在左边的，因此只需要将右边界减一即可。见方法二。</font></p>
<blockquote>
<p><font face="宋体">其实，我们之前都是考虑的左闭右开的情况，也就是low&lt;high时，到底能不能low&lt;=high呢？看方法三。</font></p>
</blockquote>
<h3 id="代码如下：-4"><a href="#代码如下：-4" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*方法一*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> minValue <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            minValue <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>minValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> minValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*方法二*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
        <span class="token keyword">int</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> low<span class="token operator">+</span><span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//最小值在左边</span>
                high <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//最小值在右边</span>
                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                high<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*方法三  low&lt;=high 左闭又闭*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token comment" spellcheck="true">// 循环的条件选为左闭右闭区间low &lt;= high</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 注意是当中值大于等于右值时，</span>
                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 将左边界移动到中值的右边</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                    <span class="token comment" spellcheck="true">// 当中值小于右值时</span>
                high <span class="token operator">=</span> mid<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 将右边界移动到中值处</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 最小值返回nums[high]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode540（有序数组中的单一元素）"><a href="#LeetCode540（有序数组中的单一元素）" class="headerlink" title="LeetCode540（有序数组中的单一元素）:"></a>LeetCode540（有序数组中的单一元素）:</h2><h3 id="题目描述（中等）"><a href="#题目描述（中等）" class="headerlink" title="题目描述（中等）:"></a>题目描述（中等）:</h3><p><font face="宋体">给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。</font></p>
<p><img src="/2021/04/14/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%B1%BB/image-20210415201427573.png" alt="image-20210415201427573"></p>
<h3 id="题解思路：-5"><a href="#题解思路：-5" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题如果没有限制时间复杂度$O(logN)$，有多种方法可以求解，首先最容易想到的是直接前后对比，每次递增两个位置，如果发现前后的元素不相等，直接返回该元素。其实还有一种解法，就是采用<strong>异或操作</strong>，因为异或操作存在几个性质。</font></p>
<ul>
<li><font face="宋体">满足交换律和结合律；</font></li>
<li><font face="宋体">x^x=0​ and x^0=x</font></li>
</ul>
<p><font face="宋体">因此，当数组中只有一个元素只出现一次，直接使用<strong>异或操作</strong>就可以找到这个元素。见方法一。</font></p>
<p><font face="宋体">为了满足题目要求的时间复杂度为$O(logN)$，考虑使用二分法。二分法有两种方法。</font></p>
<p><font face="宋体"><strong>第一种：</strong>按照题目的要求，只有一个元素是单个存在的，其它的都是成对存在，则这样的数组是奇数位的。在二分法中，以low代表低位指针，high代表高位指针，然后找到中间值mid，考察mid是否是偶数，若不是偶数就将mid减一，然后考察$nums[mid] == nums[mid+1]$，若是就代表右边的是奇数位的，则目标数一定是在右边，并让$low=low+2$；如果$nums[mid] != nums[mid+1]$，那就是左边的数组是奇数位的，也就是目标数在左边，让$high=mid$，重复这样的过程。见方法二。</font></p>
<p><font face="宋体"><strong>第二种：</strong>按照题目的要求，只有一个元素是单个存在的，其它的都是成对存在，则这样的数组是奇数位的。在二分法中，以low代表低位指针，high代表高位指针，然后找到中间值mid，考察mid右边的数组是奇数位还是偶数位并赋值给isOddRight。考察mid与mid+1和mid-1的关系，如果$nums[mid] == nums[mid+1]$，而isOddRight为真，代表目标数在右边，否则就考虑左边；如果$nums[mid] == nums[mid-1]$，而isOddRight又为真，代表目标数在左边，否则就在右边。如果mid与相邻的两者都不相等，则目标数就是mid对应的元素。</font></p>
<h3 id="代码如下：-5"><a href="#代码如下：-5" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*方法一：异或操作*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">singleNonDuplicate</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>e<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
            res <span class="token operator">=</span> res<span class="token operator">^</span>e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*方法二：二分法*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">singleNonDuplicate</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">--</span>mid<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                low <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                high <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*方法三*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">singleNonDuplicate</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">bool</span> isOddRight <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> mid<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录右边的数组是否是偶数位的</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>isOddRight<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">//证明目标数在右边，因为右边在减去nums[mid+1]后变成奇数位</span>
                    low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>isOddRight<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">//既然右边是偶数位的，那目标数就在左边</span>
                    high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode4（寻找两个正序数组的中位数）"><a href="#LeetCode4（寻找两个正序数组的中位数）" class="headerlink" title="LeetCode4（寻找两个正序数组的中位数）:"></a>LeetCode4（寻找两个正序数组的中位数）:</h2><h3 id="题目描述（困难）"><a href="#题目描述（困难）" class="headerlink" title="题目描述（困难）:"></a>题目描述（困难）:</h3><p><font face="宋体">给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</font></p>
<p><img src="/2021/04/14/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%B1%BB/image-20210415201457108.png" alt="image-20210415201457108"></p>
<h3 id="题解思路：-6"><a href="#题解思路：-6" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">方法一：参考了leetcode_88题的思路，让两个有序的数组合并成一个新的有序的数组，然后再求解中位数，但是时间复杂度有点高。</font></p>
<p><font face="宋体">方法二：这道题其实可以看成是求第k小的数的一种特例。</font></p>
<blockquote>
<p>参考windliang对于该题的题解</p>
</blockquote>
<p><font face="宋体">假设我们要对$nums1=[1,3,4,9]$和$nums2=[1,2,3,4,5,6,7,8,9,10]$这两个数组中求取第k=7小的元素。</font></p>
<p><img src="/2021/04/14/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%B1%BB/image-20210416101144459.png" alt="image-20210416101144459"></p>
<p><font face="宋体">看上面这张图，我们要分别比较这两个数组中的第k/2位，nums1中对应的是4，nums2对应的是3，由于3&lt;4则删除nums2中前k/2位元素，并让k减去被排除的元素个数等于4。直接比较剩下的数组中的元素$nums1=[1,3,4,9]$和$nums2=[4,5,6,7,8,9,10]$</font>。</p>
<p><img src="/2021/04/14/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%B1%BB/image-20210416101734328.png" alt="image-20210416101734328"></p>
<p><font face="宋体">看上面这张图，现在的nums2是排除了元素1,2,3的，因此现在的起始位置是元素4。现在分别比较两个数组的第k/2=2位的数，在nums1中是3，nums2中是5，由于3&lt;5则删除nums1中前k/2位元素。直接比较剩下的数组中的元素$nums1=[4,9]$和$nums2=[4,5,6,7,8,9,10]$。</font></p>
<p><img src="/2021/04/14/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%B1%BB/image-20210416102415655.png" alt="image-20210416102415655"></p>
<p><font face="宋体">看上图，现在k=2的，因为nums1删除了2位数字1,3。k/2=1，直接比较两个数组的第一位，但是在这种情况下，就有4=4的情形出现了，其实我们可以令4&gt;4，随便删除哪个数组中的4就可以了。然后最终的结果还是取到了4。也就是第7小的数字是4。</font></p>
<blockquote>
<p> <font face="宋体"><strong>如果k/2大于其中一个数组的长度该怎么办？</strong></font></p>
</blockquote>
<p><img src="/2021/04/14/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%B1%BB/image-20210416102957766.png" alt="image-20210416102957766"></p>
<p><font face="宋体">直接让第一个数组的指针指向最后一位元素就可以了，当这两个数被排除后，再求取长的数组的第5位就行了。</font></p>
<p><font face="宋体"><strong>方法三：</strong>回归正题了，既然这道题还是在考二分查找。那我们该如何去进行二分查找呢？先留着这个问题，我们看看如何解决这道题。</font></p>
<p><font face="宋体">如果是一个有序的数组的话，就很容易了，直接找到数组的中间位置就可以求出答案。那能不能把两个数组对等的看成一个数组呢？看下面这张图。</font></p>
<p><img src="/2021/04/14/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%B1%BB/image-20210416145709375.png" alt="image-20210416145709375"></p>
<p><font face="宋体">如果能找到一个平衡线，能将两个数组的两边分成大致相等的两部分（可能存在奇数位导致不能均分），然后让平衡线的左边的最大值恒小于右边的最小值，那问题就可以迎刃而解了。如果数组是偶数，中位数就等于左边的最大值和右边最小值的平均，如果是奇数，且左边的数量要比右边多一个，那中位数就是左边的最大值。</font></p>
<p><font face="宋体">将i的左边和j的左边共同组成“左半部分”，将i的右边和j的右边共同组成“右半部分”。</font></p>
<ul>
<li><font face="宋体">当nums1和nums2两个数组的总长度是偶数时，可以保证数组的左边等于右边，即$i+j = m-i+n-j$，也就是$j=(m+n)/2-i$。只需要调整i，j会跟着调整。左半部分的最大值小于等于右半部分的最小值。</font></li>
<li><font face="宋体">当nums1和nums2两个数组的总长度是奇数时，保证左半部分比右半部分多一个就行，$i+j = m - i + n - j + 1$，也就是$j = (m+n+1)/2-i$</font>。然后中位数就是左半部分的最大值$max（nums1[i-1], nums2[j-1])$。</li>
</ul>
<p><font face="宋体">其实，无论数组的总长度是奇数还是偶数，j的调整公式可以统一：$j = (m+n+1)/2-i$。</font></p>
<p><font face="宋体">为了保证左半部分的最大值要小于等于右半部分的最小值，需要考虑一下临界情形。如果nums1[i-1] &gt; nums2[j]，又或者nums1[i]&lt;nums2[j-1]。</font></p>
<ul>
<li><p><font face="宋体">若$nums1[i]&lt;nums2[j-1]$，在保证不越界的情况下，即$j!=0 and i!= m$，让$iMin = i+ 1$,也就是i增加。 </font></p>
</li>
<li><p><font face="宋体">若$nums1[i-1]&gt;nums2[j]$，在保证不越界的情况下，即$i!=0 and j!= n$，让$iMax = i - 1$。也就是i减小。</font></p>
</li>
</ul>
<p><font face="宋体">但是还得考虑一种情况，就是nums1所有元素都在左边或者都在右边。</font></p>
<ul>
<li><font face="宋体">nums1（A）数组所有元素都在右边，若是均分（数组长度为偶数），则左边的最大值就是nums2[j-1]，右边的最小值是$min(nums1[i],nums2[j])$，中位数就是两者取平均，否则就是左边的最大值。</font></li>
</ul>
<p><img src="/2021/04/14/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%B1%BB/image-20210416153249231.png" alt="image-20210416153249231"></p>
<ul>
<li><font face="宋体">nums1（A）数组所有元素都在左边，若是均分（数组长度为偶数），则左边的最大值就是$max(nums1[i-1],nums2[j-1])$，右边的最小值是nums2[j]，则中位数就是两者取平均，否则就是左边的最大值。</font></li>
</ul>
<p><img src="/2021/04/14/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%B1%BB/image-20210416153956874.png" alt="image-20210416153956874"></p>
<p><font face="宋体">现在再来看二分查找，二分查找的目的就是为了寻找合适的i，看方法三代码实现部分即可。</font></p>
<h3 id="代码如下：-6"><a href="#代码如下：-6" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*方法一：参考leetcode_88题的思路*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> m<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">assist</span><span class="token punctuation">(</span>m<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//合并两个数组，并使得新的数组有序</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>n<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">>=</span> nums2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                assist<span class="token punctuation">[</span>index<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>m<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                assist<span class="token punctuation">[</span>index<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>n<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            assist<span class="token punctuation">[</span>index<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>m<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            assist<span class="token punctuation">[</span>index<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>n<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>assist<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>assist<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>assist<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">+</span>assist<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>assist<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*方法二：找第k小的数*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//找第k小的数,如果是偶数，就会指向中间两个数，如果是奇数，则同样指向最中间的数</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">getKthMin</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>m<span class="token number">-1</span><span class="token punctuation">,</span>nums2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token operator">+</span> <span class="token function">getKthMin</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>m<span class="token number">-1</span><span class="token punctuation">,</span>nums2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token function">getKthMin</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> low1<span class="token punctuation">,</span> <span class="token keyword">int</span> high1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> low2<span class="token punctuation">,</span> <span class="token keyword">int</span> high2<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> len1 <span class="token operator">=</span> high1 <span class="token operator">-</span> low1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len2 <span class="token operator">=</span> high2 <span class="token operator">-</span> low2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>len1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> nums2<span class="token punctuation">[</span>low2<span class="token operator">+</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>len2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> nums1<span class="token punctuation">[</span>low1<span class="token operator">+</span>k<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span> k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>low1<span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span>low2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> i <span class="token operator">=</span> low1 <span class="token operator">+</span> <span class="token function">min</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span> k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> low2 <span class="token operator">+</span> <span class="token function">min</span><span class="token punctuation">(</span>len2<span class="token punctuation">,</span> k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">getKthMin</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> low1<span class="token punctuation">,</span> high1<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high2<span class="token punctuation">,</span> k<span class="token operator">-</span><span class="token punctuation">(</span>j<span class="token operator">-</span>low2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">getKthMin</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high1<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> low2<span class="token punctuation">,</span> high2<span class="token punctuation">,</span> k<span class="token operator">-</span><span class="token punctuation">(</span>i<span class="token operator">-</span>low1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*方法三：二分查找*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">></span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span> nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> iMin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> iMax <span class="token operator">=</span> m<span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>iMin <span class="token operator">&lt;=</span> iMax<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>iMin<span class="token operator">+</span>iMax<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span>i<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//i增大</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>m <span class="token operator">&amp;&amp;</span> j<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums2<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">></span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                iMin <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">//i减小</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">!=</span>n <span class="token operator">&amp;&amp;</span> nums1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">></span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                iMax <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//符合要求的</span>
                <span class="token comment" spellcheck="true">//求左边的最大值</span>
                <span class="token keyword">int</span> maxL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    maxL <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    maxL <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span><span class="token punctuation">{</span>
                    maxL <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment" spellcheck="true">//如果是两个数组的长度为奇数，不需要找右边最小的数</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> maxL<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment" spellcheck="true">//求右边的最小值</span>
                <span class="token keyword">int</span> minR <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    minR <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    minR <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    minR <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">return</span> <span class="token punctuation">(</span>maxL<span class="token operator">+</span>minR<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划类</title>
    <url>/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h2><h2 id="LeetCode70（爬楼梯）"><a href="#LeetCode70（爬楼梯）" class="headerlink" title="LeetCode70（爬楼梯）:"></a>LeetCode70（爬楼梯）:</h2><h3 id="题目描述（简单）"><a href="#题目描述（简单）" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<blockquote>
<p>这道题类似于剑指Offer 10-II。青蛙跳台阶问题<a href="https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/">https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/</a></p>
</blockquote>
<h3 id="题解思路："><a href="#题解思路：" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*缩减空间复杂度，上面的代码空间复杂度是O(n)*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> cur<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            cur <span class="token operator">=</span> p<span class="token operator">+</span>q<span class="token punctuation">;</span>
            p <span class="token operator">=</span> q<span class="token punctuation">;</span>
            q <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode198（打家劫舍）"><a href="#LeetCode198（打家劫舍）" class="headerlink" title="LeetCode198（打家劫舍）:"></a>LeetCode198（打家劫舍）:</h2><h3 id="题目描述（中等）"><a href="#题目描述（中等）" class="headerlink" title="题目描述（中等）:"></a>题目描述（中等）:</h3><p><font face="宋体">你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418132313470.png" alt="leetcode198"></p>
<h3 id="题解思路：-1"><a href="#题解思路：-1" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">对于动态规划而言，我们都需要将原问题转换成各个子问题，在通过子问题的求解得到动态转移关系式，从而解决原问题。子问题相对于原问题而言，规模就减少了。</font></p>
<blockquote>
<p>参考了nettee对于LeetCode198的题解，写的很好。<a href="https://leetcode-cn.com/problems/house-robber/solution/dong-tai-gui-hua-jie-ti-si-bu-zou-xiang-jie-cjavap/">https://leetcode-cn.com/problems/house-robber/solution/dong-tai-gui-hua-jie-ti-si-bu-zou-xiang-jie-cjavap/</a></p>
</blockquote>
<p><font face="宋体">动态规划的四个解题步骤：首先定义子问题，其次确定子问题的递推关系，然后确定dp数组的计算顺序，最后可以考虑能不能在空间复杂度上进行优化。</font></p>
<p><font face="宋体"><strong>1.定义子问题</strong></font></p>
<p><font face="宋体">我们需要将原问题的规模缩小，原问题是“从全部房子中能偷到的最大金额”，现在的子问题是“从k个房子中能够偷到的最大金额”，并用$f(k)$表示。 </font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418142958891.png" alt="leetcode198"></p>
<p><font face="宋体">可以看到，子问题是参数化的，因为其中定义了一个k，如果有n个房子，就一共有n个子问题。动态规划实际上就是通过求一堆子问题的解，来求出原问题的解。</font></p>
<p><font face="宋体"><strong>2.写出子问题的递推关系</strong></font></p>
<p><font face="宋体">这一步就很关键了，假设总共有n个房子，每个房子的金额分别是$H_{0},H_{1},H_{2},…,H_{n-1}$，子问题$f(k)$表示从前k个房子中能够偷到的最大金额。那么，摆在你面前的就有两种偷法了，第一种是第k个房间不偷，那么前k-1个房子能够偷到的最大金额是$f(k-1)$；第二种是偷第k个房子，那么按照题目的要求，前一个房间$H_{k-2}$就不能偷了，那么能够偷取的最大金额就是$f(k-2)+H_{k-1}$，然后在两者中选择金额较大的一种结果：$f(k) = max(f(k-1),f(k-2)+H_{k-1})$。 </font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418144759533.png" alt="image-20210418144759533"></p>
<p><font face="宋体">可以验证一下，当k=0时，$f(0)=0$；当k=1时，$f(1)=H_{0}$；当k=2时，$f(2)=max(f(1),f(0)+H_{1})；…$ </font></p>
<p><font face="宋体"><strong>3.确定DP数组的计算顺序</strong></font></p>
<p><font face="宋体">在确定了子问题的递推关系之后，就要依次计算这些子问题了。DP数组也可以叫“子问题数组”，因为DP数组中的每一个元素都对应一个子问题。如下图所示，$dp[k]$对应的子问题是$f(k)$，即偷前k个房子的最大金额。 </font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418145841867.png" alt="image-20210418145841867"></p>
<p><font face="宋体">在搞清楚了子问题的计算顺序，就可以确定DP数组的计算顺序。对于本题而言，发现每个$f(k)$依赖于$f(k-1)$和$f(k-2)$。也就是说，$dp[k]$依赖于$dp[k-1]$和$dp[k-2]$。 </font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418150547096.png" alt="image-20210418150547096"></p>
<p><font face="宋体">既然DP数组中的依赖关系都是向右指的，DP数组的计算顺序就是从左至右。这样计算一个子问题的时候，它所依赖的那些子问题也已经计算出来了。</font></p>
<h3 id="代码如下：-1"><a href="#代码如下：-1" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font face="宋体"><strong>4.空间优化</strong></font></p>
<p><font face="宋体">空间优化是动态优化的进阶内容。空间优化的原理，很多时候我们并不需要始终全部持有DP数组。对于小偷问题，我们发现，每次在计算$f(k)$时，都与$f(k-1)$和$f(k-2)$有关，而与$f(k-3)$及其之前的都无关，那么，我们就可以用两个变量来分别存储两个子问题的结果，然后就可以依次计算出所有的子问题。 </font></p>
<p><img src="https://pic.leetcode-cn.com/3dcbb1028ed9cdac95fdc8c8348ccc6f2e4c50b3fd8222e5690257d6b495090a.gif" alt="空间优化前后对比（动图）"></p>
<h3 id="代码改进："><a href="#代码改进：" class="headerlink" title="代码改进："></a>代码改进：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*空间优化从O(n)到O(1)*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">int</span> prev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
       <span class="token keyword">int</span> curr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> prev<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
           prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>
           curr <span class="token operator">=</span> temp<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">return</span> curr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode413（等差数列划分）"><a href="#LeetCode413（等差数列划分）" class="headerlink" title="LeetCode413（等差数列划分）:"></a>LeetCode413（等差数列划分）:</h2><h3 id="题目描述（中等）-1"><a href="#题目描述（中等）-1" class="headerlink" title="题目描述（中等）:"></a>题目描述（中等）:</h3><p><font face="宋体">如果一个数列至少有三个元素，并且任意两个相邻元素之差相同，则称该数列为等差数列。</font></p>
<p><font face="宋体">例如，以下数列为等差数列：</font></p>
<table>
<thead>
<tr>
<th>1</th>
<th>3</th>
<th>5</th>
<th>7</th>
<th>9</th>
<th>…</th>
</tr>
</thead>
<tbody><tr>
<td>7</td>
<td>7</td>
<td>7</td>
<td>7</td>
<td>7</td>
<td>…</td>
</tr>
<tr>
<td>2</td>
<td>4</td>
<td>6</td>
<td>8</td>
<td>10</td>
<td>…</td>
</tr>
<tr>
<td>3</td>
<td>-1</td>
<td>-5</td>
<td>-9</td>
<td>…</td>
<td></td>
</tr>
</tbody></table>
<p><font face="宋体">以下数列不是等差数列。</font></p>
<table>
<thead>
<tr>
<th>1</th>
<th>1</th>
<th>2</th>
<th>5</th>
<th>7</th>
<th>…</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><font face="宋体">数组 A 包含 N 个数，且索引从0开始。数组 A 的一个子数组划分为数组 (P, Q)，P 与 Q 是整数且满足 0&lt;=P&lt;Q&lt;N 。如果满足以下条件，则称子数组(P, Q)为等差数组：元素 A[P], A[p + 1], …, A[Q - 1], A[Q] 是等差的。并且 P + 1 &lt; Q 。函数要返回数组 A 中所有为等差数组的子数组个数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418153558873.png" alt="image-20210418153558873"></p>
<h3 id="题解思路：-2"><a href="#题解思路：-2" class="headerlink" title="题解思路："></a>题解思路：</h3><blockquote>
<p>参考venus对于leetcode413的官方解释下的补充说明。<a href="https://leetcode-cn.com/problems/arithmetic-slices/solution/deng-chai-shu-lie-hua-fen-by-leetcode/">https://leetcode-cn.com/problems/arithmetic-slices/solution/deng-chai-shu-lie-hua-fen-by-leetcode/</a></p>
</blockquote>
<p><font face="宋体">这道题要求取满足等差数列的子组，首先为了满足等差数列，必须有$nums[i]-nums[i-1] = nums[i-1] - nums[i-2]$ ，其次还要定义存储等差数列的个数的数组dp，其中dp[i]表示的是以nums[i]结尾的等差数列的个数。举个例子：对于一个数组nums =[3,4,5,6,7,8,9]，当前已经计算出dp[2]=1，dp[3]=2，需要求dp[4]。那么dp[4]=dp[3]+1的原因是：<strong>以nums[3]=6结尾</strong>的等差数列已经有了dp[3]=2个，分别是[3,4,5,6]和[4,5,6]。想要知道以nums[4]=7结尾的等差数列的个数，那么需要在已经有的dp[3]个等差数列的尾部接上一个nums[4]=7，除了[3,4,5,6,7]，还有一个新的等差数列[5,6,7]，推广到全局来看，每次都会产生一个新的长度为3的等差数列，所以才有了dp[i-1]+1。见方法一。 </font></p>
<h3 id="代码如下：-2"><a href="#代码如下：-2" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*方法一*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">numberOfArithmeticSlices</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*空间复杂度降低为O(1)*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">numberOfArithmeticSlices</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                dp <span class="token operator">=</span> dp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
                sum <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                dp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode64（最小路径和）"><a href="#LeetCode64（最小路径和）" class="headerlink" title="LeetCode64（最小路径和）:"></a>LeetCode64（最小路径和）:</h2><h3 id="题目描述（中等）-2"><a href="#题目描述（中等）-2" class="headerlink" title="题目描述（中等）:"></a>题目描述（中等）:</h3><p><font face="宋体">给定一个包含非负整数的 <code>*m* x *n*</code> 网格 <code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。<strong>说明：</strong>每次只能向下或者向右移动一步。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418164909759.png" alt="image-20210418164909759"></p>
<h3 id="题解思路：-3"><a href="#题解思路：-3" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题要求从左上角到右下角的路径和最小，假设右下角的位置是$[i,j]$，而设$dp[i][j]$表示达到(i,j)位置处路径的最小和。那么依据题意，每次只能向下或者向右移动一步，那么在到达(i,j)位置处时到达(i-1,j)或者(i,j-1)的路径和最小。因此，动态方程为$dp[i][j]=min(dp[i-1][j],dp[i][j-1])+grid[i][j]$。 </font></p>
<p><font face="宋体">其次，需要注意i-1和j-1的范围。</font></p>
<h3 id="代码如下：-3"><a href="#代码如下：-3" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode542（01矩阵）"><a href="#LeetCode542（01矩阵）" class="headerlink" title="LeetCode542（01矩阵）:"></a>LeetCode542（01矩阵）:</h2><h3 id="题目描述（中等）-3"><a href="#题目描述（中等）-3" class="headerlink" title="题目描述（中等）:"></a>题目描述（中等）:</h3><p><font face="宋体">给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离。两个相邻元素间的距离为 1 。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210419211843796.png" alt="image-20210419211843796"></p>
<h3 id="题解思路：-4"><a href="#题解思路：-4" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">对于这道题，可以分析出对于任意的一点(i,j)，距离0的距离为：</font><br>$$<br>f(i,j) =<br>\begin{cases}<br>min(f(i-1,j),f(i+1,j),f(i,j-1),f(i,j+1))+1, &amp; \text {if $matrix[i][j]!= 0$}\<br>0, &amp; \text {if $matrix[i][j] == 0$}<br>\end{cases}<br>$$<br><font face="宋体">对于程序来说，为了遍历每个点的四个方向，可以先从左上角往右下角遍历一次，然后再从右下角到左上角遍历一次，那么四个方向就可以遍历完成。</font></p>
<h3 id="代码如下：-4"><a href="#代码如下：-4" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">updateMatrix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> INT_MAX<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode221（最大正方形）"><a href="#LeetCode221（最大正方形）" class="headerlink" title="LeetCode221（最大正方形）:"></a>LeetCode221（最大正方形）:</h2><h3 id="题目描述（中等）-4"><a href="#题目描述（中等）-4" class="headerlink" title="题目描述（中等）:"></a>题目描述（中等）:</h3><p><font face="宋体">在一个由 <code>&#39;0&#39;</code> 和 <code>&#39;1&#39;</code> 组成的二维矩阵内，找到只包含 <code>&#39;1&#39;</code> 的最大正方形，并返回其面积。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210420095148483.png" alt="image-20210420095148483"></p>
<h3 id="题解思路：-5"><a href="#题解思路：-5" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">因为题目要求考虑值为“1”的最大正方形，所以在遍历原始的矩阵时候要考虑每一个值为“1”的情况，这也就是程序中为什么只对1进行了处理，而0就直接忽略。</font></p>
<p><font face="宋体"><strong>那么如何得到状态转移方程呢？</strong></font></p>
<p><font face="宋体">我们首先定义一个dp矩阵，并定义其大小是在原始的矩阵大小上加1，初始值全部设为“0”，至于为什么如此，到后面再来说这个问题。当我们找到原始的矩阵(i,j)位置为“1”时，我们就在dp矩阵的(i+1,j+1)位置查找其(i-1,j),(i,j-1),(i-1,j-1)三个位置的最小值，然后再加1。因为dp[i][j]是表示原始矩阵中以(i-1,j-1)为右下角的且只包含“1”的正方形的最大值。</font></p>
<p><font face="宋体">如果dp[i][j]如果等于“0”，就表明当前位置不在由“1”组成的正方形中。</font></p>
<p><font face="宋体">如果dp[i][j]如果等于“1”，则dp矩阵中(i,j)位置的值由(i-1,j),(i,j-1),(i-1,j-1)三个位置决定。这就得到了动态转移方程如下：</font></p>
<p>$dp(i,j)=min(dp(i-1,j),dp(i,j-1),dp(i-1,j-1))+1$</p>
<p><font face="宋体">因为每一个(i,j)都要考虑其对应三个位置的值，如果在边界上就会由于-1产生越界导致出错，所以要在原始的矩阵大小上加1.至于为什么初始值要设置为“0”，其实是为了处理边界上的问题，所以统一设置为“0”。</font></p>
<p><font face="宋体"></font></p>
<h3 id="代码如下：-5"><a href="#代码如下：-5" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">maximalSquare</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> m <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> max_side <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                max_side <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>max_side<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> max_side<span class="token operator">*</span>max_side<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">maximalSquare</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> m <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> max_side <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                max_side <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>max_side<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> max_side<span class="token operator">*</span>max_side<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode279（完全平方数）"><a href="#LeetCode279（完全平方数）" class="headerlink" title="LeetCode279（完全平方数）:"></a>LeetCode279（完全平方数）:</h2><h3 id="题目描述（中等）-5"><a href="#题目描述（中等）-5" class="headerlink" title="题目描述（中等）:"></a>题目描述（中等）:</h3><p><font face="宋体">给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, …）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210420104025178.png" alt="image-20210420104025178"></p>
<h3 id="题解思路：-6"><a href="#题解思路：-6" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题首先需要找到目标数n以内的所有完全平方数，组成一个集合perfectSquare，然后再在这个集合中挑选数量最少的完全平方数的和等于目标数，其思想与利用最少硬币找零一样。参考leetcode322。</font></p>
<h3 id="代码如下：-6"><a href="#代码如下：-6" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">numSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//先找到目标数之前的完全平方数</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> perfectSquare<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
                perfectSquare<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> perfectSquare<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> perfectSquare<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> perfectSquare<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>perfectSquare<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> INT_MAX<span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode322（零钱兑换）"><a href="#LeetCode322（零钱兑换）" class="headerlink" title="LeetCode322（零钱兑换）:"></a>LeetCode322（零钱兑换）:</h2><h3 id="题目描述（中等）-6"><a href="#题目描述（中等）-6" class="headerlink" title="题目描述（中等）:"></a>题目描述（中等）:</h3><p><font face="宋体">给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。<strong>你可以认为每种硬币的数量是无限的。</strong></font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210420151127564.png" alt="image-20210420151127564"></p>
<h3 id="题解思路：-7"><a href="#题解思路：-7" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">假设以$c_{1},c_{2},…,c_{j}$代表不同硬币的面额，而dp[i]代表要组成金额i所需要的最少硬币数。那么动态转换方程：</font></p>
<p>$$ dp[i]=\min \limits_{j=0,1,…,n-1} \big{dp[i-c_{j}]+1\big} $$</p>
<p><font face="宋体">其次，需要确定起始条件，dp数组在初始化时全部设为最大值，但是dp[0] = 0。然后遍历记录i&lt;=amount时所有的情况。</font></p>
<h3 id="代码如下：-7"><a href="#代码如下：-7" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token operator">:</span>coins<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> c<span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>c<span class="token punctuation">]</span><span class="token operator">!=</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>c<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">==</span> INT_MAX<span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode91（解码方法）"><a href="#LeetCode91（解码方法）" class="headerlink" title="LeetCode91（解码方法）:"></a>LeetCode91（解码方法）:</h2><h3 id="题目描述（中等）-7"><a href="#题目描述（中等）-7" class="headerlink" title="题目描述（中等）:"></a>题目描述（中等）:</h3><p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210427105908183.png" alt="image-20210427105908183"></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210427105948406.png" alt="image-20210427105948406"></p>
<h3 id="题解思路：-8"><a href="#题解思路：-8" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题也是动态规划很经典的一道题，对于第i个字符其解码方案有两种：</font></p>
<ul>
<li><font face="宋体">第一种是s[i]!=’0’，此时该字符可以单独解码成A-I中的某个；</font></li>
<li><font face="宋体">第二种是与前一个字符共同解码，但要满足要求s[i-1]!=’0’且(s[i-1]-‘0’)*10+(s[i]-‘0’)&lt;=26，此时组合字符可以解码成H-Z中的某个。</font></li>
</ul>
<p><font face="宋体">设定数组dp，dp[i]表示s[0],s[1],…,[i-1]的解码方案数，dp的长度在字符串s的长度基础上加1。犹豫<strong>空字符串可以有 1 种解码方法，解码出一个空字符串</strong>，所以dp[0] = 1。其动态转移方程如下：</font></p>
<p>$$dp(i) +=<br>\begin{cases}<br>dp(i-1), &amp; \text {if i&gt;=1 and $s[i-1]!= 0$}\<br>dp(i-2), &amp; \text {if i&gt;=2 and s[i-2]!= 0 and $(s[i-2]-‘0’)*10+(s[i-1]-‘0’)&lt;=26$}<br>\end{cases}$$</p>
<h3 id="代码如下：-8"><a href="#代码如下：-8" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">numDecodings</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//空串情况</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//第一种方法是在不为零时单独编码，也即是'1'&lt;=s[i]&lt;='9'，但是需要注意的是dp[i]对应的是s[0],s[1],...,s[i-1]的编码方案数</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">//第二种方法是和前面一位共同编码</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">2</span><span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode139（单词拆分）"><a href="#LeetCode139（单词拆分）" class="headerlink" title="LeetCode139（单词拆分）:"></a>LeetCode139（单词拆分）:</h2><h3 id="题目描述（中等）-8"><a href="#题目描述（中等）-8" class="headerlink" title="题目描述（中等）:"></a>题目描述（中等）:</h3><p><font face="宋体">给定一个<strong>非空</strong>字符串 s 和一个包含<strong>非空</strong>单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。</font></p>
<p><strong>说明</strong>：</p>
<ul>
<li>拆分时可以重复使用字典中的单词。</li>
<li>你可以假设字典中没有重复的单词。</li>
</ul>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210428161006874.png" alt="image-20210428161006874"></p>
<h3 id="题解思路：-9"><a href="#题解思路：-9" class="headerlink" title="题解思路："></a>题解思路：</h3><blockquote>
<p>参考官方对此题的题解：<a href="https://leetcode-cn.com/problems/word-break/solution/dan-ci-chai-fen-by-leetcode-solution/">https://leetcode-cn.com/problems/word-break/solution/dan-ci-chai-fen-by-leetcode-solution/</a></p>
</blockquote>
<p><font face="宋体">这道题目是想在字符串s中拆分成某些部分，并能在给定的字典中找到。若能够全部找到，就返回true，否则就返回false。</font></p>
<p><font face="宋体">那可以设定dp[i]表示在字符串s的前i个能够被拆分成若干个字典中存在的单词。因此为了得到状态转移方程，我们需要枚举字符串s中的所有情况。考虑某个划分j使得s[i]被拆分成s[0,…,j-1]和s[j,…,i-1]两个字符串，而s[0,…,j-1]的合法性是否又是dp[j]所确知的（现在我们只考虑dp[j]是在合法的情况下），现在只需要考证s[j,…,i-1]是否合法，也就是是否存在在字典中即可。那么动态转移方程如下： </font></p>
<p>$dp[i] = dp[j]&amp;&amp;check(s[j,i-1])$</p>
<p><font face="宋体">其中，check(s[j,i-1])是检查字符串s[j,i-1]是否合法，也就是是否在字典中出现。</font></p>
<p><font face="宋体">边界条件，dp[0]=true，空串也是合法的。就好比空集也是各个集合的子集。</font></p>
<h3 id="代码如下：-9"><a href="#代码如下：-9" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">wordBreak</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> wordDict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> wordDictSet <span class="token operator">=</span> unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> str_t<span class="token operator">:</span>wordDict<span class="token punctuation">)</span><span class="token punctuation">{</span>
            wordDictSet<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>str_t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span>，<span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> wordDictSet<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>wordDictSet<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode300（最长递增子序列）"><a href="#LeetCode300（最长递增子序列）" class="headerlink" title="LeetCode300（最长递增子序列）:"></a>LeetCode300（最长递增子序列）:</h2><h3 id="题目描述（中等）-9"><a href="#题目描述（中等）-9" class="headerlink" title="题目描述（中等）:"></a>题目描述（中等）:</h3><p><font face="宋体">给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210428215047635.png" alt="image-20210428215047635"></p>
<h3 id="题解思路：-10"><a href="#题解思路：-10" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">我们定义一个dp数组，其中dp[i]表示以nums[i]结尾的最长严格递增子序列长度。因此，本题需要两层的for循环，时间复杂度为O(n^2)。状态转移方程为：</font><br>$$<br>dp[i]=max(dp[i],dp[j]), \text {if j&lt;i and $nums[j]&lt;nums[i].$}<br>$$<br>下面的动画就演示了该过程：</p>
<p><img src="https://pic.leetcode-cn.com/Figures/300_LISSlide16.PNG" alt="img"></p>
<h3 id="代码如下：-10"><a href="#代码如下：-10" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> max_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            max_length <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>max_length<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> max_length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode403-青蛙过河"><a href="#LeetCode403-青蛙过河" class="headerlink" title="LeetCode403(青蛙过河):"></a>LeetCode403(青蛙过河):</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><font face="宋体">一只青蛙想要过河。 假定河流被等分为若干个单元格，并且在每一个单元格内都有可能放有一块石子（也有可能没有）。 青蛙可以跳上石子，但是不可以跳入水中。</font></p>
<p><font face="宋体">给你石子的位置列表 <code>stones</code>（用单元格序号 <strong>升序</strong> 表示）， 请判定青蛙能否成功过河（即能否在最后一步跳至最后一块石子上）。</font></p>
<p><font face="宋体">开始时， 青蛙默认已站在第一块石子上，并可以假定它第一步只能跳跃一个单位（即只能从单元格 1 跳至单元格 2 ）。</font></p>
<p><font face="宋体">如果青蛙上一步跳跃了 <code>k</code> 个单位，那么它接下来的跳跃距离只能选择为 <code>k - 1</code>、<code>k</code> 或 <code>k + 1</code> 个单位。 另请注意，青蛙只能向前方（终点的方向）跳跃。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210429095321163.png" alt="image-20210429095321163"></p>
<h3 id="题解思路：-11"><a href="#题解思路：-11" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">设dp[i][k]表示青蛙能否到达i处，且上一次的跳跃距离为k的状态。那么假设青蛙上一次的位置是j，那么跳跃的距离只能是k-1,k,k+1三种，需要注意的是这三种中的k与dp[i][k]中的k不一样，为了区分，我们用k’代替，k’表示是青蛙处于位置j时上一次跳跃的距离，因此得到的动态转移方程如下： </font><br>$$<br>dp(i)(k)=dp(j)(k’-1)⋁dp(j)(k’)⋁dp(j)(k’+1)<br>$$<br><font face="宋体"><strong>还需要注意的是</strong>，j作为i的上一次青蛙所在的位置，并不一定是i-1，应为0,1,…,i-1中的某一个。而且上面这个动态转移方程需要在k&lt;=j+1才成立，k = stones[i]-stones[j]。 </font></p>
<p><font face="宋体">青蛙在位置j处，最远的跳跃距离是j+1，如果两个石头之间的距离超过了j+1，那么青蛙是一定跳不过去的，所以可以先对stones进行遍历，如果发现这种情况存在，直接返回false。还有边界条件需要考虑一下，就是青蛙在位置0处，也就是起始位置，它的上一次跳跃的距离为0.因此dp[0][0]为true。 </font></p>
<blockquote>
<p>参考官网解答：<a href="https://leetcode-cn.com/problems/frog-jump/solution/qing-wa-guo-he-by-leetcode-solution-mbuo/">https://leetcode-cn.com/problems/frog-jump/solution/qing-wa-guo-he-by-leetcode-solution-mbuo/</a></p>
</blockquote>
<p><font face="宋体"><strong>这里为了更为清楚的解释动态规划，直接截取了livorth对于leetcode403的题解。</strong></font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210430110507914.png" alt="image-20210430110507914"></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210430110524230.png" alt="image-20210430110524230"></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210430110542022.png" alt="image-20210430110542022"></p>
<h3 id="代码如下：-11"><a href="#代码如下：-11" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">canCross</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> stones<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> stones<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> stones<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">></span> i<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">int</span> k <span class="token operator">=</span> stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> stones<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">></span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">//青蛙在j位置处，它的前一次跳跃最远距离为j-1，它的下一次，也就是跳到i处最远距离为j+1。如果超过了j+1,则直接退出，因为这个位置根本跳不过去。</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>



            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode1143（最长公共子序列）"><a href="#LeetCode1143（最长公共子序列）" class="headerlink" title="LeetCode1143（最长公共子序列）:"></a>LeetCode1143（最长公共子序列）:</h2><h3 id="题目描述（简单）-1"><a href="#题目描述（简单）-1" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0 。</font></p>
<p><font face="宋体">一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</font></p>
<ul>
<li><font face="宋体">例如，”ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。<br>两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。</font></li>
</ul>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210512204703664.png" alt="image-20210512204703664"></p>
<h3 id="题解思路：-12"><a href="#题解思路：-12" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">参考题解：<a href="https://leetcode-cn.com/problems/longest-common-subsequence/solution/fu-xue-ming-zhu-er-wei-dong-tai-gui-hua-r5ez6/">https://leetcode-cn.com/problems/longest-common-subsequence/solution/fu-xue-ming-zhu-er-wei-dong-tai-gui-hua-r5ez6/</a></font></p>
<h3 id="代码如下：-12"><a href="#代码如下：-12" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>string text1<span class="token punctuation">,</span> string text2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> text1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> text2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>text1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> text2<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode416（爬楼梯）"><a href="#LeetCode416（爬楼梯）" class="headerlink" title="LeetCode416（爬楼梯）:"></a>LeetCode416（爬楼梯）:</h2><h3 id="题目描述（简单）-2"><a href="#题目描述（简单）-2" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-13"><a href="#题解思路：-13" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-13"><a href="#代码如下：-13" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode474（爬楼梯）"><a href="#LeetCode474（爬楼梯）" class="headerlink" title="LeetCode474（爬楼梯）:"></a>LeetCode474（爬楼梯）:</h2><h3 id="题目描述（简单）-3"><a href="#题目描述（简单）-3" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-14"><a href="#题解思路：-14" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-14"><a href="#代码如下：-14" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode322（爬楼梯）"><a href="#LeetCode322（爬楼梯）" class="headerlink" title="LeetCode322（爬楼梯）:"></a>LeetCode322（爬楼梯）:</h2><h3 id="题目描述（简单）-4"><a href="#题目描述（简单）-4" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-15"><a href="#题解思路：-15" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-15"><a href="#代码如下：-15" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode72（爬楼梯）"><a href="#LeetCode72（爬楼梯）" class="headerlink" title="LeetCode72（爬楼梯）:"></a>LeetCode72（爬楼梯）:</h2><h3 id="题目描述（简单）-5"><a href="#题目描述（简单）-5" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-16"><a href="#题解思路：-16" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-16"><a href="#代码如下：-16" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode650（爬楼梯）"><a href="#LeetCode650（爬楼梯）" class="headerlink" title="LeetCode650（爬楼梯）:"></a>LeetCode650（爬楼梯）:</h2><h3 id="题目描述（简单）-6"><a href="#题目描述（简单）-6" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-17"><a href="#题解思路：-17" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-17"><a href="#代码如下：-17" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode10（爬楼梯）"><a href="#LeetCode10（爬楼梯）" class="headerlink" title="LeetCode10（爬楼梯）:"></a>LeetCode10（爬楼梯）:</h2><h3 id="题目描述（简单）-7"><a href="#题目描述（简单）-7" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-18"><a href="#题解思路：-18" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-18"><a href="#代码如下：-18" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode121（爬楼梯）"><a href="#LeetCode121（爬楼梯）" class="headerlink" title="LeetCode121（爬楼梯）:"></a>LeetCode121（爬楼梯）:</h2><h3 id="题目描述（简单）-8"><a href="#题目描述（简单）-8" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-19"><a href="#题解思路：-19" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-19"><a href="#代码如下：-19" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode188（爬楼梯）"><a href="#LeetCode188（爬楼梯）" class="headerlink" title="LeetCode188（爬楼梯）:"></a>LeetCode188（爬楼梯）:</h2><h3 id="题目描述（简单）-9"><a href="#题目描述（简单）-9" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-20"><a href="#题解思路：-20" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-20"><a href="#代码如下：-20" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode309（爬楼梯）"><a href="#LeetCode309（爬楼梯）" class="headerlink" title="LeetCode309（爬楼梯）:"></a>LeetCode309（爬楼梯）:</h2><h3 id="题目描述（简单）-10"><a href="#题目描述（简单）-10" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-21"><a href="#题解思路：-21" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-21"><a href="#代码如下：-21" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode213（爬楼梯）"><a href="#LeetCode213（爬楼梯）" class="headerlink" title="LeetCode213（爬楼梯）:"></a>LeetCode213（爬楼梯）:</h2><h3 id="题目描述（简单）-11"><a href="#题目描述（简单）-11" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-22"><a href="#题解思路：-22" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-22"><a href="#代码如下：-22" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode53（爬楼梯）"><a href="#LeetCode53（爬楼梯）" class="headerlink" title="LeetCode53（爬楼梯）:"></a>LeetCode53（爬楼梯）:</h2><h3 id="题目描述（简单）-12"><a href="#题目描述（简单）-12" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-23"><a href="#题解思路：-23" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-23"><a href="#代码如下：-23" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode343（爬楼梯）"><a href="#LeetCode343（爬楼梯）" class="headerlink" title="LeetCode343（爬楼梯）:"></a>LeetCode343（爬楼梯）:</h2><h3 id="题目描述（简单）-13"><a href="#题目描述（简单）-13" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-24"><a href="#题解思路：-24" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-24"><a href="#代码如下：-24" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode583（爬楼梯）"><a href="#LeetCode583（爬楼梯）" class="headerlink" title="LeetCode583（爬楼梯）:"></a>LeetCode583（爬楼梯）:</h2><h3 id="题目描述（简单）-14"><a href="#题目描述（简单）-14" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-25"><a href="#题解思路：-25" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-25"><a href="#代码如下：-25" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode646（爬楼梯）"><a href="#LeetCode646（爬楼梯）" class="headerlink" title="LeetCode646（爬楼梯）:"></a>LeetCode646（爬楼梯）:</h2><h3 id="题目描述（简单）-15"><a href="#题目描述（简单）-15" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-26"><a href="#题解思路：-26" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-26"><a href="#代码如下：-26" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode376（爬楼梯）"><a href="#LeetCode376（爬楼梯）" class="headerlink" title="LeetCode376（爬楼梯）:"></a>LeetCode376（爬楼梯）:</h2><h3 id="题目描述（简单）-16"><a href="#题目描述（简单）-16" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-27"><a href="#题解思路：-27" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-27"><a href="#代码如下：-27" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode494（爬楼梯）"><a href="#LeetCode494（爬楼梯）" class="headerlink" title="LeetCode494（爬楼梯）:"></a>LeetCode494（爬楼梯）:</h2><h3 id="题目描述（简单）-17"><a href="#题目描述（简单）-17" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-28"><a href="#题解思路：-28" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-28"><a href="#代码如下：-28" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="LeetCode714（爬楼梯）"><a href="#LeetCode714（爬楼梯）" class="headerlink" title="LeetCode714（爬楼梯）:"></a>LeetCode714（爬楼梯）:</h2><h3 id="题目描述（简单）-18"><a href="#题目描述（简单）-18" class="headerlink" title="题目描述（简单）:"></a>题目描述（简单）:</h3><p><font face="宋体">假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<strong>注意：</strong>给定 <em>n</em> 是一个正整数。</font></p>
<p><img src="/2021/04/16/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB/image-20210418125655746.png" alt="image-20210418125655746"></p>
<h3 id="题解思路：-29"><a href="#题解思路：-29" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题第一眼确实是想不到什么好的方法，但是通过找规律，却能发现这道题是在考斐波拉契数列。</font></p>
<ul>
<li><p><font face="宋体">当$n=1$，只有一种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=2$，只有两种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=3$，只有三种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=4$，就有五种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=5$，有八种方法；</font></p>
</li>
<li><p><font face="宋体">当$n=6$，只有十三种方法；</font></p>
</li>
<li><p>1,2,3,5,8,13，……这确实是斐波拉契数列</p>
</li>
</ul>
<hr>
<h3 id="代码如下：-29"><a href="#代码如下：-29" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode热门题型汇总</title>
    <url>/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h2 id="20-有效的括号（简单）"><a href="#20-有效的括号（简单）" class="headerlink" title="20.有效的括号（简单）"></a>20.有效的括号（简单）</h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</font></p>
<p><font face="宋体">有效字符串需满足：</font></p>
<ul>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
</ul>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210513085638271.png" alt="image-20210513085638271"></p>
<h4 id="题解思路："><a href="#题解思路：" class="headerlink" title="题解思路："></a>题解思路：</h4><p><font face="宋体">解法一：按照栈的思想，如果遇到的是左括号，就存入栈中，当遇到右括号时，考察右括号跟弹出栈的左括号是否对应，如果是就继续考察后面的括号，如果不是，直接返回false。</font></p>
<p><font face="宋体">解法二、；利用了无序的hash表，存储括号的对应关系，同样利用栈的思想，在遇到右括号时，考察栈顶的是否与其对应，若是，则继续考察后面的括号，否则返回false。虽然相比较解法一而言，思想都是相同的，但是，代码量小。</font></p>
<h4 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*解法一：*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">isValid</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> s_t<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">']'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'}'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'['</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'{'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    s_t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s_t<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s_t<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        s_t<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s_t<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>s_t<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        s_t<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'}'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s_t<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s_t<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'{'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        s_t<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> s_t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*解法二：*/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">isValid</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'['</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'{'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">']'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'}'</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> st<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> isTrue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> flag <span class="token operator">=</span> m<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">>=</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>m<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> flag <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                isTrue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            isTrue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> isTrue<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="21-合并两个有序链表（简单）"><a href="#21-合并两个有序链表（简单）" class="headerlink" title="21.合并两个有序链表（简单）"></a>21.合并两个有序链表（简单）</h2><h3 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210513111017460.png" alt="image-20210513111017460"></p>
<h4 id="题解思路：-1"><a href="#题解思路：-1" class="headerlink" title="题解思路："></a>题解思路：</h4><p><font face="宋体">解法一：需要新建一个链表用来存储两个链表比较后要填入的值。</font></p>
<p><font face="宋体">解法二；利用递归。</font></p>
<h4 id="实现代码：-1"><a href="#实现代码：-1" class="headerlink" title="实现代码："></a>实现代码：</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*解法一：*/</span>
<span class="token comment" spellcheck="true">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l2 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        ListNode<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ListNode<span class="token operator">*</span> newListNode <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span><span class="token keyword">nullptr</span> <span class="token operator">||</span> l2 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span><span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> l1<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;=</span> l2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
                ListNode<span class="token operator">*</span> newVal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                newListNode<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
                newListNode <span class="token operator">=</span> newListNode<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
                l1 <span class="token operator">=</span> l1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span><span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> l1<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">></span> l2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
                ListNode<span class="token operator">*</span> newVal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>l2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                newListNode<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
                newListNode <span class="token operator">=</span> newListNode<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
                l2 <span class="token operator">=</span> l2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span><span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                newListNode<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>
                newListNode <span class="token operator">=</span> newListNode<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
                l1 <span class="token operator">=</span> l1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">==</span><span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                newListNode<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>
                newListNode <span class="token operator">=</span> newListNode<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
                l2 <span class="token operator">=</span> l2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> root<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>



    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*解法二：*/</span>
<span class="token comment" spellcheck="true">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>l2 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;=</span> l2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
            l1<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">,</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        l2<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> l2<span class="token punctuation">;</span>   

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="53-最大子序和（简单）"><a href="#53-最大子序和（简单）" class="headerlink" title="53.最大子序和（简单）"></a>53.最大子序和（简单）</h2><h3 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210513152154534.png" alt="image-20210513152154534"></p>
<h4 id="题解思路：-2"><a href="#题解思路：-2" class="headerlink" title="题解思路："></a>题解思路：</h4><p><font face="宋体">先定义一个dp数组，其中dp[i]表示的是数组nums[i]以i为索引之前最大和的连续子数组的和，因为题目说的是子数组最少包含一个元素，所以如果dp[i-1]为负的，那么dp[i]直接取nums[i]，否则就取dp[i-1]+nums[i]。动态转移方程为:</font><br>$$<br>dp(i) = max(nums[i],dp[i-1]+nums[i])<br>$$</p>
<h4 id="实现代码：-2"><a href="#实现代码：-2" class="headerlink" title="实现代码："></a>实现代码：</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> max_val <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            max_val <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>max_val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">return</span> max_val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="94-二叉树的中序遍历（简单）"><a href="#94-二叉树的中序遍历（简单）" class="headerlink" title="94.二叉树的中序遍历（简单）"></a>94.二叉树的中序遍历（简单）</h2><h3 id="题目描述：-3"><a href="#题目描述：-3" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">给定一个二叉树的根节点 <code>root</code> ，返回它的 <strong>中序</strong> 遍历。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210513172948423.png" alt="image-20210513172948423"></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210513173011706.png" alt="image-20210513173011706"></p>
<h4 id="题解思路：-3"><a href="#题解思路：-3" class="headerlink" title="题解思路："></a>题解思路：</h4><p><font face="宋体">先说说二叉树的前序遍历、中序遍历以及后续遍历。</font></p>
<ul>
<li>前序遍历：先访问根结点，然后再访问左子结点，最后访问右子结点；</li>
<li>中序遍历：先访问左子结点，再访问根结点，最后访问右子结点；</li>
<li>后序遍历：先访问左子结点，再访问右子结点，最后访问根结点。</li>
</ul>
<p><font face="宋体">举个例子：</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210513173203478.png" alt="image-20210513173203478"></p>
<h4 id="实现代码：-3"><a href="#实现代码：-3" class="headerlink" title="实现代码："></a>实现代码：</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */</span>
<span class="token comment" spellcheck="true">//中序遍历</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> keys<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">midErgodic</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> keys<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">midErgodic</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//前序遍历</span>
        <span class="token comment" spellcheck="true">//keys.emplace_back(x->val);</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">midErgodic</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//中序遍历</span>
        keys<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">midErgodic</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//后序遍历</span>
        <span class="token comment" spellcheck="true">//keys.emplace_back(x->val);</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="101-对称二叉树（简单）"><a href="#101-对称二叉树（简单）" class="headerlink" title="101.对称二叉树（简单）"></a>101.对称二叉树（简单）</h2><h3 id="题目描述：-4"><a href="#题目描述：-4" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">给定一个二叉树，检查它是否是镜像对称的。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210513190011410.png" alt="image-20210513190011410"></p>
<h4 id="题解思路：-4"><a href="#题解思路：-4" class="headerlink" title="题解思路："></a>题解思路：</h4><p><font face="宋体">直接递归遍历即可。如果根结点不存在，返回true；如果根结点存在但没有叶子结点，也返回true；如果叶子结点存在就比较这两个叶子结点的值是否相等，如果不等就返回false，否则就继续比较left.left和right.right是否相等，以及left.right和right.left是否相等。 </font></p>
<h4 id="实现代码：-4"><a href="#实现代码：-4" class="headerlink" title="实现代码："></a>实现代码：</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> left<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">==</span> right<span class="token operator">-</span><span class="token operator">></span>val <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>left<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> right<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>left<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> right<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h2><h3 id="题目描述：-5"><a href="#题目描述：-5" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">给定一个二叉树，找出其最大深度。</font></p>
<p><font face="宋体">二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</font></p>
<p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210514145042036.png" alt="image-20210514145042036"></p>
<h3 id="题解思路：-5"><a href="#题解思路：-5" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">解法一：深度优先搜索，利用递归去一步步搜索。</font></p>
<p><font face="宋体">解法二：广度优先搜索，利用层遍历，依次将每一层的所有结点存储进来，然后再依次弹出队列，这样维护队列并记录维护的次数即可。</font></p>
<h3 id="实现代码：-5"><a href="#实现代码：-5" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */</span>
<span class="token comment" spellcheck="true">//解法一：深度优先搜索</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法一的复杂度分析：</p>
<ul>
<li>时间复杂度：O(n)，其中n为二叉树节点的个数，每个节点在递归中只被遍历一次；</li>
<li>空间复杂度：O(height)，其中height表示树的高度。递归函数需要栈空间，而栈空间取决于递归的深度，因此空间复杂度等价于二叉树的高度。</li>
</ul>
</blockquote>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */</span>
<span class="token comment" spellcheck="true">//解法二：广度优先搜索</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> Q<span class="token punctuation">;</span>
        Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> sz <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>sz<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                TreeNode<span class="token operator">*</span> newNode <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>newNode<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newNode<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>newNode<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newNode<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            ans<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法二的复杂度分析：</p>
<ul>
<li>时间复杂度；O(n)，需要遍历二叉树中所有的节点；</li>
<li>空间复杂度：取决于队列中的元素个数，最差是O(n)。</li>
</ul>
</blockquote>
<h2 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-6"><a href="#题目描述：-6" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</font></p>
<p><font face="宋体">你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</font></p>
<p><font face="宋体">返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> </font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210514150736556.png" alt="image-20210514150736556"></p>
<h3 id="题解思路：-6"><a href="#题解思路：-6" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">解法一：最容易想到的是直接暴力穷举，但是超时了。</font></p>
<p><font face="宋体">解法二：暴力穷举的时候利用了两个for循环，如何实现只需要遍历一遍。例如假定一个dp[i]表示在第i+1天卖出能获得的最大利润，也就是在第i位置之前找比当前值最小的值。那么动态转移方程为dp[i]=max(dp[i-1], prices[i]-minV)，其中minV = min(minV, prices[i])。</font></p>
<p><font face="宋体">解法二改进，找一个常量maxV去记录最大值。</font></p>
<h3 id="实现代码：-6"><a href="#实现代码：-6" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//暴力穷举</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> maxV <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">int</span> res <span class="token operator">=</span> prices<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                maxV <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxV<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> maxV<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法一的复杂度分析：</p>
<ul>
<li>时间复杂度：O(N^2)因为使用了两个for循环；</li>
<li>空间复杂度：O(1)使用了常数个变量。</li>
</ul>
</blockquote>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法二</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//dp[i]表示在第i+1天卖出时获得的最大利润</span>
        <span class="token comment" spellcheck="true">//vector&lt;int> dp(n+1,0);</span>
        <span class="token keyword">int</span> minV <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> maxV <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            minV <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minV<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//dp[i] = max(dp[i-1], prices[i] - minV);</span>
            maxV <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxV<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minV<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> maxV<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法二的复杂度分析：</p>
<ul>
<li>时间复杂度：O(N)使用了一个for循环；</li>
<li>空间复杂度：O(1)使用了常数个变量（改进的）。（未改进的空间复杂度是O(N)，因为有一个dp数组。）</li>
</ul>
</blockquote>
<h2 id="136-只出现一次的数字（简单）"><a href="#136-只出现一次的数字（简单）" class="headerlink" title="136.只出现一次的数字（简单）"></a>136.只出现一次的数字（简单）</h2><h3 id="题目描述：-7"><a href="#题目描述：-7" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</font></p>
<p><font face="宋体"><strong>说明：</strong>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210514153935001.png" alt="image-20210514153935001"></p>
<h3 id="题解思路：-7"><a href="#题解思路：-7" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">为了找到其中仅仅只出现一次的值（其余的出现两次），直接异或操作就可以得到该值。因为异或运算满足如下的规律：</font></p>
<ul>
<li><font face="宋体">$a\bigoplus0=a$</font></li>
<li><font face="宋体">$a\bigoplus a=0$</font></li>
<li><font face="宋体">$a\bigoplus b\bigoplus a = (a\bigoplus a) \bigoplus b = 0 \bigoplus b = b$</font></li>
</ul>
<h3 id="实现代码：-7"><a href="#实现代码：-7" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            t <span class="token operator">=</span> t <span class="token operator">^</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>代码的复杂度分析：</p>
<ul>
<li>时间复杂度：O(N)使用了一个for循环；</li>
<li>空间复杂度：O(1)使用了常数个变量。</li>
</ul>
</blockquote>
<h2 id="141-环形链表（简单）"><a href="#141-环形链表（简单）" class="headerlink" title="141.环形链表（简单）"></a>141.环形链表（简单）</h2><h3 id="题目描述：-8"><a href="#题目描述：-8" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">给定一个链表，判断链表中是否有环。</font></p>
<p><font face="宋体">如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</font></p>
<p><font face="宋体">如果链表中存在环，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210514155820320.png" alt="image-20210514155820320"></p>
<h3 id="题解思路：-8"><a href="#题解思路：-8" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">解法一：找链表中的环直接使用快慢指针，快指针每次走两步，慢指针每次只走一步，如果快指针能够追上慢指针，那么证明有环。否则，无环。 </font></p>
<p><font face="宋体">解法二：利用hash表，记录每次遍历的节点，如果找到某个节点在hash表中存在，证明有环，否则没有环。</font></p>
<h3 id="实现代码：-8"><a href="#实现代码：-8" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */</span>
<span class="token comment" spellcheck="true">//解法一：快慢指针</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
        ListNode<span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>

        <span class="token keyword">do</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> fast<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            fast <span class="token operator">=</span> fast<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
            slow <span class="token operator">=</span> slow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> slow<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>代码的复杂度分析：</p>
<ul>
<li>时间复杂度：O(N)，其中N为链表中的节点数。当链表中不存在环的时候，快指针比慢指针优先达到链表尾部，链表中每个节点最多被访问两次。当链表中存在环的时候，每一轮移动后，快慢指针的距离将减小一。而初始距离为环的长度，因此最多移动N轮。</li>
<li>空间复杂度：O(1)只使用了两个变量，快慢指针。</li>
</ul>
</blockquote>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法二：hash表(unordered_set)</span>
<span class="token comment" spellcheck="true">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        unordered_set<span class="token operator">&lt;</span>ListNode<span class="token operator">*</span><span class="token operator">></span> hs<span class="token punctuation">;</span>
        
        <span class="token keyword">do</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>hs<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                hs<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
                head <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>代码复杂度分析：</p>
<ul>
<li>时间复杂度：O(N)，N为节点的个数，每个节点都会遍历一遍。</li>
<li>空间复杂度：O(N)，主要是hash表的开销。</li>
</ul>
</blockquote>
<h2 id="876-链表的中间节点"><a href="#876-链表的中间节点" class="headerlink" title="876.链表的中间节点"></a>876.链表的中间节点</h2><h3 id="题目描述：-9"><a href="#题目描述：-9" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">给定一个头结点为 <code>head</code> 的非空单链表，返回链表的中间结点。</font></p>
<p><font face="宋体">如果有两个中间结点，则返回第二个中间结点。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210514171759712.png" alt="image-20210514171759712"></p>
<h3 id="题解思路：-9"><a href="#题解思路：-9" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">解法一：参照查找链表的倒数第k个节点。</font></p>
<p><font face="宋体">解法二：利用快慢指针，让快指针优先走到链表的尾部，然后此时慢指针的位置就是所求的节点。</font></p>
<h3 id="实现代码：-9"><a href="#实现代码：-9" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */</span>
<span class="token comment" spellcheck="true">//解法一</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    ListNode<span class="token operator">*</span> <span class="token function">middleNode</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
        ListNode<span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            n<span class="token operator">++</span><span class="token punctuation">;</span>
            head <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">int</span> k <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// if(n%2 == 0){</span>
        <span class="token comment" spellcheck="true">//     k = n / 2 -1;</span>
        <span class="token comment" spellcheck="true">// }else{</span>
        <span class="token comment" spellcheck="true">//     k = n / 2;</span>
        <span class="token comment" spellcheck="true">// }</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            fast <span class="token operator">=</span> fast<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            fast <span class="token operator">=</span> fast<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
            slow <span class="token operator">=</span> slow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法一的复杂度分析：</p>
<ul>
<li>时间复杂度：O(N)，遍历N个节点。</li>
<li>空间复杂度：O(1)，使用了常数个变量(n，k，fast，slow)。</li>
</ul>
</blockquote>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */</span>
 <span class="token comment" spellcheck="true">//解法二</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    ListNode<span class="token operator">*</span> <span class="token function">middleNode</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
        ListNode<span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            
            slow <span class="token operator">=</span> slow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
            fast <span class="token operator">=</span> fast<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法二的复杂度分析：</p>
<ul>
<li>时间复杂度：O(N)，其中N是给定的链表的节点数目；</li>
<li>空间复杂度：O(1)，只需要常数空间存放slow和fast两个指针。</li>
</ul>
</blockquote>
<h2 id="155-最小栈（简单）"><a href="#155-最小栈（简单）" class="headerlink" title="155.最小栈（简单）"></a>155.最小栈（简单）</h2><h3 id="题目描述：-10"><a href="#题目描述：-10" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">设计一个支持 <code>push</code> ，<code>pop</code> ，<code>top</code> 操作，并能在常数时间内检索到最小元素的栈。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210515150814949.png" alt="image-20210515150814949"></p>
<h3 id="题解思路：-10"><a href="#题解思路：-10" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">略…</font></p>
<h3 id="实现代码：-10"><a href="#实现代码：-10" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment" spellcheck="true">/** initialize your data structure here. */</span>
    <span class="token keyword">int</span><span class="token operator">*</span> value<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//int minValue;</span>
    <span class="token keyword">int</span> length<span class="token punctuation">;</span>
    <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">20000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        
        length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value<span class="token punctuation">[</span>length<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//minValue = min(minValue, val);</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        value<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        length<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> value<span class="token punctuation">[</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> minValue <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            minValue <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minValue<span class="token punctuation">,</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> minValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="160-相交链表（简单）"><a href="#160-相交链表（简单）" class="headerlink" title="160.相交链表（简单）"></a>160.相交链表（简单）</h2><h3 id="题目描述：-11"><a href="#题目描述：-11" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">编写一个程序，找到两个单链表相交的起始节点。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210515153016013.png" alt="image-20210515153016013"></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210515153034088.png" alt="image-20210515153034088"></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210515153055565.png" alt="image-20210515153055565"></p>
<h3 id="题解思路：-11"><a href="#题解思路：-11" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">解法一：利用hash表（unordered_set去存储遍历第一个链表的所有节点），在遍历第二个链表时考察是否在hash表中存在，如果存在就证明有公共节点。</font></p>
<p><font face="宋体">&lt;解法二（暴击666）：利用双指针的办法，分别定义两个指针遍历彼此的链表，当遍历完自己的链表后，开始遍历其它的链表，如果有相交的节点，两个指针就会在（第一个）节点处相遇。（/dogs感受到爱的暴击没有！！）由于两个链表的长度不一定相同，所以这样遍历完自己的链表再遍历其它的链表会消除这种影响:a+c+b+c = b+c+a+c（其中，c是公共的节点，a和b分别是两个链表其余的部分，长度不一定相同。）/font&gt;</font></p>
<h3 id="实现代码：-11"><a href="#实现代码：-11" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法一</span>
<span class="token comment" spellcheck="true">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    ListNode <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>headA<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        unordered_set<span class="token operator">&lt;</span>ListNode<span class="token operator">*</span><span class="token operator">></span> hs<span class="token punctuation">;</span>
        ListNode<span class="token operator">*</span> person <span class="token operator">=</span> headA<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>person <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            hs<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
            person <span class="token operator">=</span> person<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        person <span class="token operator">=</span> headB<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>person <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>hs<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> person<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//else hs.insert(person);</span>
            person <span class="token operator">=</span> person<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法一的复杂度分析：</p>
<ul>
<li>时间复杂度：O(m+n)，m和n为两个链表的长度，因为需要遍历所有的节点。</li>
<li>空间复杂度：O(m)、O(n)，因为主要的影响还是由于hash表，需要存储其中某一个链表中所有的节点。</li>
</ul>
</blockquote>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法二</span>
<span class="token comment" spellcheck="true">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    ListNode <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>headA<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ListNode<span class="token operator">*</span> ha <span class="token operator">=</span> headA<span class="token punctuation">;</span>
        ListNode<span class="token operator">*</span> hb <span class="token operator">=</span> headB<span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>ha <span class="token operator">!=</span> hb<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//可以写成三目运算符</span>
            <span class="token comment" spellcheck="true">//ha = (ha == nullptr)?headB:ha->next;</span>
            <span class="token comment" spellcheck="true">//hb = (hb == nullptr)?headA:hb->next;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ha <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                ha <span class="token operator">=</span> ha<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                ha <span class="token operator">=</span> headB<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
            <span class="token keyword">if</span><span class="token punctuation">(</span>hb <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                hb <span class="token operator">=</span> hb<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">{</span>
                hb <span class="token operator">=</span> headA<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ha<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法二的复杂度分析：</p>
<ul>
<li>时间复杂度：O（m+n），因为要遍历所有的节点；</li>
<li>空间复杂度：O(1)，只使用了常数个变量。</li>
</ul>
</blockquote>
<h2 id="206-反转链表（简单）"><a href="#206-反转链表（简单）" class="headerlink" title="206.反转链表（简单）"></a>206.反转链表（简单）</h2><h3 id="题目描述：-12"><a href="#题目描述：-12" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210515163306033.png" alt="image-20210515163306033"></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210515163318272.png" alt="image-20210515163318272"></p>
<h3 id="题解思路：-12"><a href="#题解思路：-12" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">解法一：利用递归来实现链表的反转。在解法一中有一个很核心的代码：</font><br>$$<br>head-&gt;next-&gt;next = head;\head-&gt;next = NULL<br>$$<br>就如$n_{k}$是链表中的第k个节点，然后要执行反转是让$n_{k+2}$变成$n_{k}$，而$n_{k+1}=NULL$。而返回的curr是头结点（反转后的头结点）。</p>
<p><font face="宋体">解法二：迭代。</font></p>
<h3 id="实现代码：-12"><a href="#实现代码：-12" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法一</span>
<span class="token comment" spellcheck="true">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ListNode<span class="token operator">*</span> curr <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        head<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> curr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法一的复杂度分析：</p>
<ul>
<li>时间复杂度：O(n)，n表示链表的长度。要遍历所有的节点。</li>
<li>空间复杂度：O(n)，因为要执行调用n次递归函数，这里的空间复杂度主要是取决于递归调用的栈空间，最多为n。</li>
</ul>
</blockquote>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法二</span>
<span class="token comment" spellcheck="true">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       ListNode<span class="token operator">*</span> preNode <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
       ListNode<span class="token operator">*</span> newNode <span class="token operator">=</span> head<span class="token punctuation">;</span>

       <span class="token keyword">while</span><span class="token punctuation">(</span>newNode <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           ListNode<span class="token operator">*</span> node_next <span class="token operator">=</span> newNode<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
           newNode<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> preNode<span class="token punctuation">;</span>
           preNode <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
           newNode <span class="token operator">=</span> node_next<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       <span class="token keyword">return</span> preNode<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法二的复杂度分析：</p>
<ul>
<li>时间复杂度：O(N)，因为要遍历所有的节点。</li>
<li>空间复杂度：O(1)，使用了常数个变量。</li>
</ul>
</blockquote>
<h2 id="169-多数元素（简单）"><a href="#169-多数元素（简单）" class="headerlink" title="169.多数元素（简单）"></a>169.多数元素（简单）</h2><h3 id="题目描述：-13"><a href="#题目描述：-13" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">给定一个大小为 <em>n</em> 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</font></p>
<p><font face="宋体">你可以假设数组是非空的，并且给定的数组总是存在多数元素。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210515172604727.png" alt="image-20210515172604727"></p>
<h3 id="题解思路：-13"><a href="#题解思路：-13" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">解法一：hash表。直接遍历一遍数组，并统计每个元素的个数，然后再按照题目的要求得到个数大于n/2就是众数。</font></p>
<p><font face="宋体">解法二：分治法。分，利用递归将原始的数组拆分成长度为1的单个元素；治，就是考察每次拆分后的元素的个数那一个更多，并返回子数组中的众数。然后再与其它子数组中的众数进行比较，返回最终的众数。详细看解法二代码实现部分。</font></p>
<p><font face="宋体">解法三：Boyer-Moore投票算法。下面是其算法的步骤：</font></p>
<ul>
<li><font face="宋体">首先需要维护两个变量，一个是候选数candidate和它出现的次数count。初始化时可以让candidate为任意值，然后count为0；</font></li>
<li><font face="宋体">遍历数组，考察第一个元素是否和cnadidate一样，如果是一样的就让count加1，否则就减1。同时还需要考察count是否开始小于0，如果是就要让candidate变为当前遍历的元素，并让count等于1。</font></li>
<li><font face="宋体">在遍历完成后，candidate就是整个数组的众数。</font></li>
</ul>
<p>可以举个例子，如果nums={2,1,2,2,3,3,3,3,3}，使用Boyer-Moore投票算法执行的步骤如下：</p>
<ul>
<li>1.首先让candidate=-1，count=0;</li>
<li>2.查看数组的第一个元素是否跟cnadidate相等，显然candidate!=nums[0]，则count–，此时count=-1，将cnadidate赋值为nums[0]，后面的依次类推…</li>
</ul>
<table>
<thead>
<tr>
<th>数组元素：</th>
<th>2</th>
<th>1</th>
<th>2</th>
<th>2</th>
<th>3</th>
<th>3</th>
<th>3</th>
<th>3</th>
<th>3</th>
</tr>
</thead>
<tbody><tr>
<td>candidate：</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>3</td>
<td>3</td>
<td>3</td>
</tr>
<tr>
<td>count:</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
</tbody></table>
<p>最终得到该数组的众数为3。</p>
<blockquote>
<p>参考官方解答：<a href="https://leetcode-cn.com/problems/majority-element/solution/duo-shu-yuan-su-by-leetcode-solution/">https://leetcode-cn.com/problems/majority-element/solution/duo-shu-yuan-su-by-leetcode-solution/</a></p>
</blockquote>
<h3 id="实现代码：-13"><a href="#实现代码：-13" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法一：hash表</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> cnt<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            cnt<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">;</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">>=</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
                result <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法一的复杂度分析：</p>
<ul>
<li>时间复杂度：O(N)，其中N是数组的长度。为了统计每个元素出现的个数需要遍历整个数组。</li>
<li>空间复杂度：O(N)，根据题意哈希表最多包含$N-\lfloor N/2\rfloor$个键值对，所以占用的空间为O(N)。</li>
</ul>
</blockquote>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法二：分治法</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">countInRange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> high<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">int</span> <span class="token function">majority_element_rec</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>low <span class="token operator">==</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> left_majority <span class="token operator">=</span> <span class="token function">majority_element_rec</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right_majority <span class="token operator">=</span> <span class="token function">majority_element_rec</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">countInRange</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left_majority<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> left_majority<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">countInRange</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> right_majority<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> right_majority<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">majority_element_rec</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法二的复杂度分析：</p>
<ul>
<li>时间复杂度：O(nlogn)。(????????)</li>
<li>空间复杂度：O(logN)，空间消耗主要是递归调用，为了得到长度为1的个体，每次调用都是截取一半。假设总共的元素个数是n，那么截取t次剩余的部分长度为$n/(2^t)$，那么让$n/(2^t)=1$，则可以计算出$t=log(n)$，因此递归调用了O(logn)次。</li>
</ul>
</blockquote>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法三：Boyer-Moore 投票算法</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> candidate <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>candidate <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                count<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                candidate <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> candidate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法三的复杂度分析：</p>
<ul>
<li>时间复杂度：O(N)，其中N是数组的长度，Boyer-Moore投票算法只对数组进行了依次遍历。</li>
<li>空间复杂度：O(1)，只使用了常数个变量（candidate，count）。</li>
</ul>
</blockquote>
<h2 id="226-翻转二叉树（简单）"><a href="#226-翻转二叉树（简单）" class="headerlink" title="226.翻转二叉树（简单）"></a>226.翻转二叉树（简单）</h2><h3 id="题目描述：-14"><a href="#题目描述：-14" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">翻转一颗二叉树。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210516173021197.png" alt="image-20210516173021197"></p>
<h3 id="题解思路：-14"><a href="#题解思路：-14" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">看这道题的第一眼，就想到了101对称二叉树，所以按照先前的套路写了值交换，在运行案例[1,2]时发现值交换并不会变成[1,null,2]。故还是得按照结点交换。</font></p>
<p><font face="宋体">利用递归，在每一次递归的时候找到左节点和右节点，然后更改指向（也就是交换）。看实现代码，递归是在找到叶子结点时才开始交换，首先交换的是左边。例如示例，在找到叶结点1时，继续搜索该节点的子节点，发现都是nullptr，执行交换。但是由于1为叶子节点故没什么变化，返回节点1。开始执行节点2的右子节点，同样叶子节点3也执行了交换，返回节点3。然后节点1和节点3执行交换，变为2的左节点是3，右节点是1。返回节点2，开始执行节点4的右子节点的交换过程，最后返回节点7，此时节点7的左子结点为9，右子节点为6，然后交换节点2和节点7，返回节点4。至此，二叉树的反转完毕。</font></p>
<h3 id="实现代码：-14"><a href="#实现代码：-14" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    TreeNode<span class="token operator">*</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        TreeNode<span class="token operator">*</span> left <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        TreeNode<span class="token operator">*</span> right <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> right<span class="token punctuation">;</span>
        root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> left<span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="234-回文链表（简单）"><a href="#234-回文链表（简单）" class="headerlink" title="234.回文链表（简单）"></a>234.回文链表（简单）</h2><h3 id="题目描述：-15"><a href="#题目描述：-15" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">请判断一个链表是否为回文链表。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210516174314057.png" alt="image-20210516174314057"></p>
<h3 id="题解思路：-15"><a href="#题解思路：-15" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">解法一：直接把链表中的值拷贝到数组中，然后利用双指针去处理是否是回文。</font></p>
<p><font face="宋体">解法二：使用递归，当递归找到尾结点时，定义一个记录头节点的指针，然后依次比较。</font></p>
<h3 id="实现代码：-15"><a href="#实现代码：-15" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法一</span>
<span class="token comment" spellcheck="true">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> int_v<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            int_v<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            head <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> int_v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">,</span>r<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>int_v<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> int_v<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法一的复杂度分析：</p>
<ul>
<li>时间复杂度：O(n)，其中n为链表的长度；</li>
<li>空间复杂度：O(n)，主要的消耗还是vector。</li>
</ul>
</blockquote>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法二：递归</span>
<span class="token comment" spellcheck="true">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    ListNode<span class="token operator">*</span> frontPointer<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> curr<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>curr<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>frontPointer<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">!=</span> curr<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            frontPointer <span class="token operator">=</span> frontPointer<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        frontPointer <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法二的复杂度分析：</p>
<ul>
<li>时间复杂度：O(n)，遍历了整个链表；</li>
<li>空间复杂度：O(n)，n次递归调用。</li>
</ul>
</blockquote>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法三：快慢指针</span>
<span class="token comment" spellcheck="true">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//递归实现链表的反转</span>
    ListNode<span class="token operator">*</span> <span class="token function">reverseListNode</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> root<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ListNode<span class="token operator">*</span> curr <span class="token operator">=</span> <span class="token function">reverseListNode</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> root<span class="token punctuation">;</span>
        root<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> curr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token comment" spellcheck="true">//迭代实现链表的反转</span>
    <span class="token comment" spellcheck="true">// ListNode* reverseListNode(ListNode* root){</span>
    <span class="token comment" spellcheck="true">//     if(root == nullptr){</span>
    <span class="token comment" spellcheck="true">//         return nullptr;</span>
    <span class="token comment" spellcheck="true">//     }</span>
    <span class="token comment" spellcheck="true">//     ListNode* curr = root;</span>
    <span class="token comment" spellcheck="true">//     ListNode* pre = nullptr;</span>
    <span class="token comment" spellcheck="true">//     while(curr != nullptr){</span>
    <span class="token comment" spellcheck="true">//         ListNode* newNode = curr->next;</span>
    <span class="token comment" spellcheck="true">//         curr->next = pre;</span>
    <span class="token comment" spellcheck="true">//         pre = curr;</span>
    <span class="token comment" spellcheck="true">//         curr = newNode;</span>
    <span class="token comment" spellcheck="true">//     }</span>
    <span class="token comment" spellcheck="true">//     return pre;</span>
    <span class="token comment" spellcheck="true">// }  </span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
        ListNode<span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            fast <span class="token operator">=</span> fast<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
            slow <span class="token operator">=</span> slow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//反转链表</span>
        ListNode<span class="token operator">*</span> secondHalf <span class="token operator">=</span> <span class="token function">reverseListNode</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//判断回文</span>
        <span class="token keyword">bool</span> result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        ListNode<span class="token operator">*</span> h1 <span class="token operator">=</span> head<span class="token punctuation">;</span>
        ListNode<span class="token operator">*</span> h2 <span class="token operator">=</span> secondHalf<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> h2 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>h1<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">!=</span> h2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            h1 <span class="token operator">=</span> h1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
            h2 <span class="token operator">=</span> h2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//将链表反转后还原</span>
        slow <span class="token operator">=</span> <span class="token function">reverseListNode</span><span class="token punctuation">(</span>secondHalf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法三的复杂度分析：</p>
<ul>
<li>时间复杂度：O(n)，n指的是链表的大小；</li>
<li>空间复杂度：O(n)，因为使用了递归；若不使用递归，就为O(1)。</li>
</ul>
</blockquote>
<h2 id="283-移动零（简单）"><a href="#283-移动零（简单）" class="headerlink" title="283.移动零（简单）"></a>283.移动零（简单）</h2><h3 id="题目描述：-16"><a href="#题目描述：-16" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210517095048937.png" alt="image-20210517095048937"></p>
<h3 id="题解思路：-16"><a href="#题解思路：-16" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">解法一：第一感觉就是利用一个新的数组，记录原始数组中的非零值，然后最终拷贝到原始数组中。</font></p>
<p><font face="宋体">解法二：利用双指针，一个指针指向元素为0的位置，另一个指针指向元素不为0的位置，然后交换，并对两个指针进行维护（也就是让指向零的指针在交换后指向下一个零的位置，而指向非零的指针就指向下一个非零的元素）。</font></p>
<h3 id="实现代码：-16"><a href="#实现代码：-16" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法一</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">nums_t</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index_t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                nums_t<span class="token punctuation">[</span>index_t<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法一的复杂度分析：</p>
<ul>
<li>时间复杂度：O(n)，遍历整个数组；</li>
<li>空间复杂度：O(n)，主要是nums_t的数组消耗占主体。</li>
</ul>
</blockquote>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法二</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> zero_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> v_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>v_index <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>zero_index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> zero_index<span class="token operator">++</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>v_index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> zero_index <span class="token operator">&lt;</span> v_index  <span class="token operator">&amp;&amp;</span>  nums<span class="token punctuation">[</span>zero_index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>v_index<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>zero_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                zero_index<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            v_index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>      
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法二的复杂度分析：</p>
<ul>
<li>时间复杂度：O(n)，n为数组的长度，需要遍历整个数组。</li>
<li>空间复杂度：O(1)，只使用了常数个变量。</li>
</ul>
</blockquote>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法二的更简单写法</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> zero_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> v_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>v_index <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>v_index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>zero_index<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>v_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                zero_index<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            v_index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>      
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="448-找到所有数组中消失的数字（简单）"><a href="#448-找到所有数组中消失的数字（简单）" class="headerlink" title="448.找到所有数组中消失的数字（简单）"></a>448.找到所有数组中消失的数字（简单）</h2><h3 id="题目描述：-17"><a href="#题目描述：-17" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">给定一个范围在 1 ≤ a[i] ≤ <em>n</em> ( <em>n</em> = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。</font></p>
<p><font face="宋体">找到所有在 [1, <em>n</em>] 范围之间没有出现在数组中的数字。</font></p>
<p><font face="宋体">您能在不使用额外空间且时间复杂度为*O(n)*的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210517103021976.png" alt="image-20210517103021976"></p>
<h3 id="题解思路：-17"><a href="#题解思路：-17" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">解法一：利用hash表记录存在过的数，然后考察哪些在[1,n]范围内不存在的数，并进行输出。</font></p>
<p><font face="宋体">解法二：由于数组中的数都是限定在n以内的，因此可以利用n以外的数来代替hash表的功能表示该数是否存在过。思想与解法一一致。</font></p>
<h3 id="实现代码：-17"><a href="#实现代码：-17" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法一：hash表</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findDisappearedNumbers</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> hs<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
            hs<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> result<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>hs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                result<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法一的复杂度分析：</p>
<ul>
<li>时间复杂度：O(n)；第一个是遍历了nums数组，第二是一个for循环，那么时间复杂度为O(2n)，去掉常数项，则时间复杂度为O(n);</li>
<li>空间复杂度：O(n)。主要是由于hash表和result数组。</li>
</ul>
</blockquote>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法二：利用超过n的数表示该数是否存在，代替hash表</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findDisappearedNumbers</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> result<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
                result<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法二的复杂度分析：</p>
<ul>
<li>时间复杂度：O(n);</li>
<li>空间复杂度：题目说是O(1)，返回值不计入空间复杂度，但我认为是O(n)。</li>
</ul>
</blockquote>
<h2 id="461-汉明距离（简单）"><a href="#461-汉明距离（简单）" class="headerlink" title="461.汉明距离（简单）"></a>461.汉明距离（简单）</h2><h3 id="题目描述：-18"><a href="#题目描述：-18" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">两个整数之间的<a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB">汉明距离</a>指的是这两个数字对应二进制位不同的位置的数目。</font></p>
<p><font face="宋体">给出两个整数 <code>x</code> 和 <code>y</code>，计算它们之间的汉明距离。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210517114300610.png" alt="image-20210517114300610"></p>
<h3 id="题解思路：-18"><a href="#题解思路：-18" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">解法一：先异或操作可以得到哪些位置是不同的，然后利用移位来统计有多少个1.</font></p>
<p><font face="宋体">解法二：布赖恩·克尼根算法。算法的思路如下：</font></p>
<p>如果是想统计$5_{d}=(101)_{b}$中1的个数，我们就让5与（5-1）按位与，过程如下：<br>$$<br>101\ \underline{&amp; 100}\ \Downarrow \ 100 \<br> \underline{&amp; 011} \\Downarrow \000<br>$$<br>从上面的过程中可以看到，5&amp;4=4,4&amp;3=0，其中&amp;操作了两次，则5中1的个数为2.</p>
<h3 id="实现代码：-18"><a href="#实现代码：-18" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法一：异或和移位</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> xor_v <span class="token operator">=</span> x <span class="token operator">^</span> y<span class="token punctuation">;</span>
        <span class="token keyword">int</span> distance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>xor_v <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>xor_v<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                distance<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            xor_v <span class="token operator">=</span> xor_v <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">return</span> distance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法一的复杂度分析：</p>
<ul>
<li>时间复杂度：O(1)，int的大小固定，处理时间也是固定的。32位整数需要32次迭代。</li>
<li>空间复杂度：O(1)，使用恒定大小的空间。</li>
</ul>
</blockquote>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法二：布赖恩·克尼根算法</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> distance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> xor_t <span class="token operator">=</span> x <span class="token operator">^</span> y<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>xor_t<span class="token punctuation">)</span><span class="token punctuation">{</span>
            xor_t <span class="token operator">=</span> xor_t <span class="token operator">&amp;</span> <span class="token punctuation">(</span>xor_t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            distance<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> distance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法二的复杂度分析：</p>
<ul>
<li>时间复杂度：O(1)，与移位方法类似，由于整数的位数是固定的，因此具有恒定的时间复杂度。</li>
<li>空间复杂度：O(1)，只使用了恒定大小的空间，与输入无关。</li>
</ul>
</blockquote>
<h2 id="543-二叉树的直径（简单）"><a href="#543-二叉树的直径（简单）" class="headerlink" title="543.二叉树的直径（简单）"></a>543.二叉树的直径（简单）</h2><h3 id="题目描述：-19"><a href="#题目描述：-19" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210517145812177.png" alt="image-20210517145812177"></p>
<h3 id="题解思路：-19"><a href="#题解思路：-19" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">这道题容易让人联想到求树的深度（104），但是题目要求的是直径。可以观察对于任意一个结点，其求得的左深度和右深度之和，就是待求的所谓直径，然后记录这个直径的最大值就是整棵树的直径。</font></p>
<h3 id="实现代码：-19"><a href="#实现代码：-19" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> left_depth <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right_depth <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> left_depth<span class="token operator">+</span>right_depth<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>left_depth<span class="token punctuation">,</span>right_depth<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>代码的复杂度分析：</p>
<ul>
<li>时间复杂度：O(n)，n是树的结点数，递归需要遍历所有的结点。</li>
<li>空间复杂度：O(height)，其中height为二叉树的高度，由于递归函数在递归过程中需要为每一层递归函数分配栈空间，所以这里需要额外的空间且该空间取决于递归的深度，而递归的深度显然为二叉树的高度，并且每次递归调用的函数里面又用了常数个变量，所以需要的空间复杂度为O(Height)。</li>
</ul>
</blockquote>
<h2 id="617-合并二叉树（简单）"><a href="#617-合并二叉树（简单）" class="headerlink" title="617.合并二叉树（简单）"></a>617.合并二叉树（简单）</h2><h3 id="题目描述：-20"><a href="#题目描述：-20" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</font></p>
<p><font face="宋体">你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则<strong>不为</strong> NULL 的节点将直接作为新二叉树的节点。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210517160813803.png" alt="image-20210517160813803"></p>
<h3 id="题解思路：-20"><a href="#题解思路：-20" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">解法一：深度优先搜索，从根结点开始遍历两个二叉树，并将对应的节点进行合并。两个二叉树的对应节点可能存在以下三种情况，对于每种情况的使用不同的合并方式。</font></p>
<ul>
<li>如果两个二叉树的对应节点为空，那么合并后的对应节点也是空；</li>
<li>如果两个二叉树的对应节点有一个为空，另一个不为空，那么合并后的对应节点就是那个不为空的节点；</li>
<li>如果两个二叉树的对应节点均不为空，那么合并后的节点就是两个节点值之和，此时需要显性合并两个节点。</li>
</ul>
<p>解法一是要开辟新的节点，可以考虑直接在原树上进行操作，例如root1。参考解法二。</p>
<p><font face="宋体">解法三：广度优先搜索，需要一个额外的数据结构来辅助，可以是栈也可以是队列。</font></p>
<p>首先，当两个二叉树的左子结点不为空，就放入队列中，如果两个二叉树的右子结点不为空，也把右子节点存入队列中。</p>
<p>如果树1的左子结点为空，而树2的左子结点不为空，就把树2的左子节点挂到树1的上面；同理如果树1的右子节点为空，而树2的右子节点不为空，就把树2的右子节点挂到树1上面。如果都不为空，就将值相加然后赋给树1的对应节点。</p>
<h3 id="实现代码：-20"><a href="#实现代码：-20" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法一：深度优先搜索</span>
<span class="token comment" spellcheck="true">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    TreeNode<span class="token operator">*</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root1<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> root2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>root1 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root2<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>root2 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root1<span class="token punctuation">;</span>
        <span class="token keyword">auto</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>root1<span class="token operator">-</span><span class="token operator">></span>val<span class="token operator">+</span>root2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        newNode<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> root2<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        newNode<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> root2<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法一的复杂度分析：</p>
<ul>
<li>时间复杂度：O(min(m,n))，其中m和n分别是两个二叉树的节点树。对两个二叉树同时进行深度优先搜索，只有当两个二叉树中的对应节点不为空时才会对该节点进行显性合并操作，因此被访问到的节点树不会超过较小的二叉树的节点数；</li>
<li>空间复杂度：O(min(m,n))，其中m和n分别是两个二叉树的节点个数。空间复杂度取决于递归调用的层数，递归调用的层数不会超过较小二叉树的最大高度，最坏的情况下，二叉树的高度等于结点数。</li>
</ul>
</blockquote>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法二：深度优先搜索，不需要创建新的节点</span>
<span class="token comment" spellcheck="true">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    TreeNode<span class="token operator">*</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root1<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> root2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>root1 <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> root2 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> root1 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token operator">?</span>root2<span class="token operator">:</span>root1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        root1<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">+</span><span class="token operator">=</span> root2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>
        root1<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> root2<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root1<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> root2<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法二的复杂度分析：</p>
<ul>
<li>时间复杂度：O(n)，n为两棵树中节点数的最小的一个。</li>
<li>空间复杂度：O(height)，height为树的高度。</li>
</ul>
</blockquote>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//解法三：广度优先搜索</span>
<span class="token comment" spellcheck="true">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    TreeNode<span class="token operator">*</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root1<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> root2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>root1 <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> root2 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root1 <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> root2<span class="token operator">:</span>root1<span class="token punctuation">;</span>

        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            TreeNode<span class="token operator">*</span> t1 <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            TreeNode<span class="token operator">*</span> t2 <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            t1<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">+</span><span class="token operator">=</span> t2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">//如果t1和t2的左子树不为空，就放入队列中</span>
            <span class="token comment" spellcheck="true">//如果t1的左子树为空，就把t2的左子树挂到t1的左子树上</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>t1<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> t2<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t1<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t2<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t1<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                t1<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> t2<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">//如果t1和t2的右子树不为空，就放入队列</span>
            <span class="token comment" spellcheck="true">//如果t1的右子树为空，将t2的右子树挂到t1的右子树上去</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>t1<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> t2<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t1<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t2<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t1<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                t1<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> t2<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> root1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>解法三的复杂度分析：</p>
<ul>
<li>时间复杂度：O(min(m,n))，其中m和n为两个二叉树的节点个数。对两个二叉树同时进行广度优先搜索，只有当两个二叉树中的对应节点都不为空的时候才会访问到该节点，因此被访问到的节点数不会超过较小的二叉树的节点数；</li>
<li>空间复杂度：O(min(m,n))，其中m和n分别是两个二叉树的节点数。空间复杂度取决于队列中的元素个数，队列中的元素个数不会超过较小的二叉树的节点数。</li>
</ul>
</blockquote>
<h2 id="3-无重复字符的最长子串（中等）"><a href="#3-无重复字符的最长子串（中等）" class="headerlink" title="3.无重复字符的最长子串（中等）"></a>3.无重复字符的最长子串（中等）</h2><h3 id="题目描述：-21"><a href="#题目描述：-21" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体">给定一个字符串，请你找出其中不含有重复字符的<strong>最长子串</strong>的长度。</font></p>
<p><img src="/2021/05/12/LeetCode/LeetCode%E7%83%AD%E9%97%A8%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/image-20210518100138179.png" alt="image-20210518100138179"></p>
<h3 id="题解思路：-21"><a href="#题解思路：-21" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体">滑动窗口求解，并利用一个hash表来辅助，如果右指针指向的元素在hash表中没有，就把该元素拷贝到hash表中，如果右指针指向的元素在hs表中存在，那么利用左指针，将hs表中的数据清除，并将新的元素（与之前重复的元素）放入hash表中，然后利用一个maxStr用来记录其中最大的无重复子串的长度。</font></p>
<h3 id="实现代码：-21"><a href="#实现代码：-21" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        unordered_set<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> hs<span class="token punctuation">;</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> maxStr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>hs<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                hs<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            maxStr <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxStr<span class="token punctuation">,</span> i <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hs<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> maxStr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>代码的复杂度分析：</p>
<ul>
<li>时间复杂度：O(n)，n是字符串的长度，左指针和右指针分别会遍历一次整个字符长度；</li>
<li>空间复杂度：O($|\Sigma|$)，其中$\Sigma$表示字符集</li>
</ul>
</blockquote>
<h2 id="121-买卖股票的最佳时机-1"><a href="#121-买卖股票的最佳时机-1" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-22"><a href="#题目描述：-22" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-22"><a href="#题解思路：-22" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-22"><a href="#实现代码：-22" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-2"><a href="#121-买卖股票的最佳时机-2" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-23"><a href="#题目描述：-23" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-23"><a href="#题解思路：-23" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-23"><a href="#实现代码：-23" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-3"><a href="#121-买卖股票的最佳时机-3" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-24"><a href="#题目描述：-24" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-24"><a href="#题解思路：-24" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-24"><a href="#实现代码：-24" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-4"><a href="#121-买卖股票的最佳时机-4" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-25"><a href="#题目描述：-25" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-25"><a href="#题解思路：-25" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-25"><a href="#实现代码：-25" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-5"><a href="#121-买卖股票的最佳时机-5" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-26"><a href="#题目描述：-26" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-26"><a href="#题解思路：-26" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-26"><a href="#实现代码：-26" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-6"><a href="#121-买卖股票的最佳时机-6" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-27"><a href="#题目描述：-27" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-27"><a href="#题解思路：-27" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-27"><a href="#实现代码：-27" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-7"><a href="#121-买卖股票的最佳时机-7" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-28"><a href="#题目描述：-28" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-28"><a href="#题解思路：-28" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-28"><a href="#实现代码：-28" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-8"><a href="#121-买卖股票的最佳时机-8" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-29"><a href="#题目描述：-29" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-29"><a href="#题解思路：-29" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-29"><a href="#实现代码：-29" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-9"><a href="#121-买卖股票的最佳时机-9" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-30"><a href="#题目描述：-30" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-30"><a href="#题解思路：-30" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-30"><a href="#实现代码：-30" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-10"><a href="#121-买卖股票的最佳时机-10" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-31"><a href="#题目描述：-31" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-31"><a href="#题解思路：-31" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-31"><a href="#实现代码：-31" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-11"><a href="#121-买卖股票的最佳时机-11" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-32"><a href="#题目描述：-32" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-32"><a href="#题解思路：-32" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-32"><a href="#实现代码：-32" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-12"><a href="#121-买卖股票的最佳时机-12" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-33"><a href="#题目描述：-33" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-33"><a href="#题解思路：-33" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-33"><a href="#实现代码：-33" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-13"><a href="#121-买卖股票的最佳时机-13" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-34"><a href="#题目描述：-34" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-34"><a href="#题解思路：-34" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-34"><a href="#实现代码：-34" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-14"><a href="#121-买卖股票的最佳时机-14" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-35"><a href="#题目描述：-35" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-35"><a href="#题解思路：-35" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-35"><a href="#实现代码：-35" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-15"><a href="#121-买卖股票的最佳时机-15" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-36"><a href="#题目描述：-36" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-36"><a href="#题解思路：-36" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-36"><a href="#实现代码：-36" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-16"><a href="#121-买卖股票的最佳时机-16" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-37"><a href="#题目描述：-37" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-37"><a href="#题解思路：-37" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-37"><a href="#实现代码：-37" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-17"><a href="#121-买卖股票的最佳时机-17" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-38"><a href="#题目描述：-38" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-38"><a href="#题解思路：-38" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-38"><a href="#实现代码：-38" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-18"><a href="#121-买卖股票的最佳时机-18" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-39"><a href="#题目描述：-39" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-39"><a href="#题解思路：-39" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-39"><a href="#实现代码：-39" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-19"><a href="#121-买卖股票的最佳时机-19" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-40"><a href="#题目描述：-40" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-40"><a href="#题解思路：-40" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-40"><a href="#实现代码：-40" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-20"><a href="#121-买卖股票的最佳时机-20" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-41"><a href="#题目描述：-41" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-41"><a href="#题解思路：-41" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-41"><a href="#实现代码：-41" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-21"><a href="#121-买卖股票的最佳时机-21" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-42"><a href="#题目描述：-42" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-42"><a href="#题解思路：-42" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-42"><a href="#实现代码：-42" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-22"><a href="#121-买卖股票的最佳时机-22" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-43"><a href="#题目描述：-43" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-43"><a href="#题解思路：-43" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-43"><a href="#实现代码：-43" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-23"><a href="#121-买卖股票的最佳时机-23" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-44"><a href="#题目描述：-44" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-44"><a href="#题解思路：-44" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-44"><a href="#实现代码：-44" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-24"><a href="#121-买卖股票的最佳时机-24" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-45"><a href="#题目描述：-45" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-45"><a href="#题解思路：-45" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-45"><a href="#实现代码：-45" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-25"><a href="#121-买卖股票的最佳时机-25" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-46"><a href="#题目描述：-46" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-46"><a href="#题解思路：-46" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-46"><a href="#实现代码：-46" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-26"><a href="#121-买卖股票的最佳时机-26" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-47"><a href="#题目描述：-47" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-47"><a href="#题解思路：-47" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-47"><a href="#实现代码：-47" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-27"><a href="#121-买卖股票的最佳时机-27" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-48"><a href="#题目描述：-48" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-48"><a href="#题解思路：-48" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-48"><a href="#实现代码：-48" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-28"><a href="#121-买卖股票的最佳时机-28" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-49"><a href="#题目描述：-49" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-49"><a href="#题解思路：-49" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-49"><a href="#实现代码：-49" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-29"><a href="#121-买卖股票的最佳时机-29" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-50"><a href="#题目描述：-50" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-50"><a href="#题解思路：-50" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-50"><a href="#实现代码：-50" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-30"><a href="#121-买卖股票的最佳时机-30" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-51"><a href="#题目描述：-51" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-51"><a href="#题解思路：-51" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-51"><a href="#实现代码：-51" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-31"><a href="#121-买卖股票的最佳时机-31" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-52"><a href="#题目描述：-52" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-52"><a href="#题解思路：-52" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-52"><a href="#实现代码：-52" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-32"><a href="#121-买卖股票的最佳时机-32" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-53"><a href="#题目描述：-53" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-53"><a href="#题解思路：-53" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-53"><a href="#实现代码：-53" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="121-买卖股票的最佳时机-33"><a href="#121-买卖股票的最佳时机-33" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><h3 id="题目描述：-54"><a href="#题目描述：-54" class="headerlink" title="题目描述："></a>题目描述：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="题解思路：-54"><a href="#题解思路：-54" class="headerlink" title="题解思路："></a>题解思路：</h3><p><font face="宋体"></font></p>
<p><font face="宋体"></font></p>
<h3 id="实现代码：-54"><a href="#实现代码：-54" class="headerlink" title="实现代码："></a>实现代码：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
</search>
