<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>并查集</title>
    <url>/2021/04/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<h2 id="并查集的定义"><a href="#并查集的定义" class="headerlink" title="并查集的定义"></a>并查集的定义</h2><p><font face="宋体">并查集是一种树型的数据结构，并可以高效的执行下面两种操作：</font></p>
<ul>
<li><font face="宋体">1. 查询两个元素是否属于同一分组；</font></li>
<li><font face="宋体">2. 合并两个元素所在的分组。</font><span id="more"></span>
<h2 id="并查集的结构特点"><a href="#并查集的结构特点" class="headerlink" title="并查集的结构特点"></a>并查集的结构特点</h2><font face="宋体">并查集是一种树型结构，但这棵树跟之前理解的二叉树、红黑树以及B树等不一样，这种树的要求比较简单。</font></li>
<li><font face="宋体"> 每一个元素都有唯一的对应的分组标识（一个结点）；</font></li>
<li><font face="宋体">每一组数据中的多个元素都在同一棵树中；</font></li>
<li><font face="宋体"> 一个组中对应的树跟另外组所对应的树没有任何联系；</font></li>
<li><font face="宋体">元素在树中并没有子父级关系的硬性要求。</font></li>
</ul>
<h2 id="并查集的代码实现与测试结果"><a href="#并查集的代码实现与测试结果" class="headerlink" title="并查集的代码实现与测试结果"></a>并查集的代码实现与测试结果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">并查集的实现</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class UF &#123;</span><br><span class="line">private:</span><br><span class="line">	int* eleAndGroup;</span><br><span class="line">	int count; &#x2F;&#x2F;记录分组的个数</span><br><span class="line">public:</span><br><span class="line">	UF(int N) &#123;</span><br><span class="line">		this-&gt;count &#x3D; N;</span><br><span class="line">		this-&gt;eleAndGroup &#x3D; new int[N];</span><br><span class="line">		&#x2F;&#x2F;初始化eleAndGroup中每个索引是并查集中的每个元素，而eleAndGroup中的每个元素是并查集的分组情况</span><br><span class="line">		for (int i &#x3D; 0; i &lt; N; i++) &#123;</span><br><span class="line">			eleAndGroup[i] &#x3D; i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~UF() &#123;</span><br><span class="line">		delete eleAndGroup;</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;获取当前并查集中的数据有多少个分组</span><br><span class="line">	int length() &#123;</span><br><span class="line">		return count;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;获取元素p所在的分组标识</span><br><span class="line">	int find(int p) &#123;</span><br><span class="line">		return eleAndGroup[p];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;判断并查集中的元素p和q是否在同一分组中</span><br><span class="line">	bool connected(int p, int q) &#123;</span><br><span class="line">		return find(p) &#x3D;&#x3D; find(q);</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;合并p所在的分组和q元素所在的分组</span><br><span class="line">	void unionGroup(int p, int q) &#123;</span><br><span class="line">		if (connected(p, q)) &#123;</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;找到p所在的分组标识</span><br><span class="line">		int pGroup &#x3D; eleAndGroup[p];</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;找到q所在的分组标识</span><br><span class="line">		int qGroup &#x3D; eleAndGroup[q];</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;合并组:将p所在的分组所有元素都改为qGroup</span><br><span class="line">		for (int i &#x3D; 0; i &lt; sizeof(eleAndGroup) &#x2F; sizeof(eleAndGroup[0]); i++) &#123;</span><br><span class="line">			if (eleAndGroup[i] &#x3D;&#x3D; pGroup) &#123;</span><br><span class="line">				eleAndGroup[i] &#x3D; qGroup;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;分组个数-1</span><br><span class="line">		this-&gt;count--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">	UF uf(12);</span><br><span class="line">	while (true) &#123;</span><br><span class="line">		int q, p;</span><br><span class="line">		cout &lt;&lt; &quot;Please input two elements:&quot;;</span><br><span class="line">		cin &gt;&gt; p &gt;&gt; q;</span><br><span class="line"></span><br><span class="line">		if (uf.connected(p, q)) &#123;</span><br><span class="line">			cout &lt;&lt; &quot;两个元素在同一个分组！&quot; &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		uf.unionGroup(p, q);</span><br><span class="line">		cout &lt;&lt; &quot;分组个数:&quot; &lt;&lt; uf.length() &lt;&lt; endl;</span><br><span class="line">		</span><br><span class="line">		if(uf.length() &#x3D;&#x3D; 1)&#123;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="运行的结果："><a href="#运行的结果：" class="headerlink" title="运行的结果："></a>运行的结果：</h4><p><img src="/2021/04/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86/1617851508746.png" alt="Alt text"><br><font face="宋体">可以清楚的看到，在实现unionGroup时候，要想让所有的数据都在一个分组，则需要调用N-1次unionGroup方法才行，而每一次的unionGroup方法里面又有一个for循环来遍历所有的元素，因此整个算法的时间复杂度是O(N^2)，如果要解决大规模问题显然是不合适的。</font></p>
<h4 id="改进的find和unionGroup方法"><a href="#改进的find和unionGroup方法" class="headerlink" title="改进的find和unionGroup方法"></a>改进的find和unionGroup方法</h4><p><font face="宋体">为了提升unionGroup的性能，需要重新设计find方法和union方法。</font></p>
<ul>
<li><font face="宋体">任然让eleAndGroup数组的索引作为某个结点的元素；</font></li>
<li><font face="宋体">eleAndGroup中的值不再是当前结点所在分组的标识，而是该结点的父结点。</font></li>
</ul>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">并查集的实现</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class UF &#123;</span><br><span class="line">private:</span><br><span class="line">	int* eleAndGroup;</span><br><span class="line">	int count; &#x2F;&#x2F;记录分组的个数</span><br><span class="line">public:</span><br><span class="line">	UF(int N) &#123;</span><br><span class="line">		this-&gt;count &#x3D; N;</span><br><span class="line">		this-&gt;eleAndGroup &#x3D; new int[N];</span><br><span class="line">		&#x2F;&#x2F;初始化eleAndGroup中每个索引是并查集中的每个元素，而eleAndGroup中的每个元素是并查集的分组情况</span><br><span class="line">		for (int i &#x3D; 0; i &lt; N; i++) &#123;</span><br><span class="line">			eleAndGroup[i] &#x3D; i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~UF() &#123;</span><br><span class="line">		delete eleAndGroup;</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;获取当前并查集中的数据有多少个分组</span><br><span class="line">	int length() &#123;</span><br><span class="line">		return count;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;获取元素p所在的分组标识</span><br><span class="line">	int find(int p) &#123;</span><br><span class="line">		&#x2F;&#x2F;return eleAndGroup[p];</span><br><span class="line"></span><br><span class="line">		while (true) &#123;</span><br><span class="line">			if (p &#x3D;&#x3D; eleAndGroup[p]) &#123;</span><br><span class="line">				return p;</span><br><span class="line">			&#125;</span><br><span class="line">			p &#x3D; eleAndGroup[p];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;判断并查集中的元素p和q是否在同一分组中</span><br><span class="line">	bool connected(int p, int q) &#123;</span><br><span class="line">		return find(p) &#x3D;&#x3D; find(q);</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;合并p所在的分组和q元素所在的分组</span><br><span class="line">	void unionGroup(int p, int q) &#123;</span><br><span class="line">		&#x2F;&#x2F;if (connected(p, q)) &#123;</span><br><span class="line">		&#x2F;&#x2F;	return;</span><br><span class="line">		&#x2F;&#x2F;&#125;</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;&#x2F;&#x2F;找到p所在的分组标识</span><br><span class="line">		&#x2F;&#x2F;int pGroup &#x3D; eleAndGroup[p];</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;&#x2F;&#x2F;找到q所在的分组标识</span><br><span class="line">		&#x2F;&#x2F;int qGroup &#x3D; eleAndGroup[q];</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;&#x2F;&#x2F;合并组:将p所在的分组所有元素都改为qGroup</span><br><span class="line">		&#x2F;&#x2F;for (int i &#x3D; 0; i &lt; sizeof(eleAndGroup) &#x2F; sizeof(eleAndGroup[0]); i++) &#123;</span><br><span class="line">		&#x2F;&#x2F;	if (eleAndGroup[i] &#x3D;&#x3D; pGroup) &#123;</span><br><span class="line">		&#x2F;&#x2F;		eleAndGroup[i] &#x3D; qGroup;</span><br><span class="line">		&#x2F;&#x2F;	&#125;</span><br><span class="line">		&#x2F;&#x2F;&#125;</span><br><span class="line">		&#x2F;&#x2F;&#x2F;&#x2F;分组个数-1</span><br><span class="line">		&#x2F;&#x2F;this-&gt;count--;</span><br><span class="line"></span><br><span class="line">		int pRoot &#x3D; find(p);</span><br><span class="line">		int qRoot &#x3D; find(q);</span><br><span class="line"></span><br><span class="line">		if (pRoot &#x3D;&#x3D; qRoot) &#123;</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;让p所在的树的根结点指向q所在树的根结点</span><br><span class="line">		eleAndGroup[pRoot] &#x3D; qRoot;</span><br><span class="line"></span><br><span class="line">		this-&gt;count--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><font face="宋体">目前优化后的方法还是存在一个问题，要让并查集中所有的数据连通，任然需要调用N-1次unionGroup方法。虽然unionGroup方法的时间复杂度变为了O(N)，但是修改的find方法在最坏的情况下的时间复杂度是O(N)。我们知道，当树的高度越低，查找的速度越快，因此为了避免find方法的最坏情况发生，考虑使用路径压缩来降低树的高度。</font></p>
<h4 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h4><p><font face="宋体">其实很简单，我们在处理两棵树合并的时候是直接将某棵树的根结点指向另一棵树的叶子结点，这就导致树的高度增加。为了避免这种情况，需要在合并两棵树的时候考察一下那棵树比较高，然后把较低的那棵树的根结点指向较高树的根结点即可。<br></font></p>
<h5 id="代码实现如下："><a href="#代码实现如下：" class="headerlink" title="代码实现如下："></a>代码实现如下：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">并查集的实现</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class UF_Tree_Weighted &#123;</span><br><span class="line">private:</span><br><span class="line">	int* eleAndGroup; &#x2F;&#x2F;记录结点元素和该元素所在的分组标识</span><br><span class="line">	int count; &#x2F;&#x2F;记录分组的个数</span><br><span class="line">	int* sz; &#x2F;&#x2F;用来存储每个根结点对应的树中保存的结点个数</span><br><span class="line">public:</span><br><span class="line">	UF_Tree_Weighted(int N) &#123;</span><br><span class="line">		this-&gt;count &#x3D; N;</span><br><span class="line">		this-&gt;eleAndGroup &#x3D; new int[N];</span><br><span class="line">		&#x2F;&#x2F;初始化eleAndGroup中每个索引是并查集中的每个元素，而eleAndGroup中的每个元素是并查集的分组情况</span><br><span class="line">		for (int i &#x3D; 0; i &lt; N; i++) &#123;</span><br><span class="line">			eleAndGroup[i] &#x3D; i;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		this-&gt;sz &#x3D; new int[N];</span><br><span class="line">		&#x2F;&#x2F;默认情况下，sz中每个索引处的值都是1</span><br><span class="line">		for (int i &#x3D; 0; i &lt; N; i++) &#123;</span><br><span class="line">			sz[i] &#x3D; 1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~UF_Tree_Weighted() &#123;</span><br><span class="line">		delete eleAndGroup;</span><br><span class="line">		delete sz;</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;获取当前并查集中的数据有多少个分组</span><br><span class="line">	int length() &#123;</span><br><span class="line">		return count;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;获取元素p所在的分组标识</span><br><span class="line">	int find(int p) &#123;</span><br><span class="line">		&#x2F;&#x2F;return eleAndGroup[p];</span><br><span class="line"></span><br><span class="line">		while (true) &#123;</span><br><span class="line">			if (p &#x3D;&#x3D; eleAndGroup[p]) &#123;</span><br><span class="line">				return p;</span><br><span class="line">			&#125;</span><br><span class="line">			p &#x3D; eleAndGroup[p];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;判断并查集中的元素p和q是否在同一分组中</span><br><span class="line">	bool connected(int p, int q) &#123;</span><br><span class="line">		return find(p) &#x3D;&#x3D; find(q);</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;合并p所在的分组和q元素所在的分组</span><br><span class="line">	void unionGroup(int p, int q) &#123;</span><br><span class="line">		int pRoot &#x3D; find(p);</span><br><span class="line">		int qRoot &#x3D; find(q);</span><br><span class="line"></span><br><span class="line">		if (pRoot &#x3D;&#x3D; qRoot) &#123;</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		if (sz[pRoot] &gt; sz[qRoot]) &#123;</span><br><span class="line">			eleAndGroup[qRoot] &#x3D; pRoot;</span><br><span class="line">			sz[pRoot] +&#x3D; sz[qRoot];</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			eleAndGroup[pRoot] &#x3D; qRoot;</span><br><span class="line">			sz[qRoot] +&#x3D; sz[pRoot];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		this-&gt;count--;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">	UF_Tree_Weighted uf(4);</span><br><span class="line">	while (true) &#123;</span><br><span class="line">		int q, p;</span><br><span class="line">		cout &lt;&lt; &quot;Please input two elements:&quot;;</span><br><span class="line">		cin &gt;&gt; p &gt;&gt; q;</span><br><span class="line"></span><br><span class="line">		if (uf.connected(p, q)) &#123;</span><br><span class="line">			cout &lt;&lt; &quot;两个元素在同一个分组！&quot; &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		uf.unionGroup(p, q);</span><br><span class="line">		cout &lt;&lt; &quot;分组个数:&quot; &lt;&lt; uf.length() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">		if (uf.length() &#x3D;&#x3D; 1) &#123;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>红黑树</title>
    <url>/2021/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
    <content><![CDATA[<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p><font face="宋体">红黑树是基于2-3树思想的内含有红黑链的二叉查找树，并满足以下三种条件：<br></font></p>
<ul>
<li><font face="宋体">1. 红色链接必须是左链接；</font></li>
<li> <font face="宋体">2. 任何一个结点不可能有两个红色链接；</font><span id="more"></span></li>
<li> <font face="宋体">3. 该树是完美黑色匹配，也即任意的空连到根结点的路径上的黑链接数目是相同的。</font></li>
</ul>
<h3 id="红黑树的一些基本操作"><a href="#红黑树的一些基本操作" class="headerlink" title="红黑树的一些基本操作"></a>红黑树的一些基本操作</h3><h4 id="1-左旋"><a href="#1-左旋" class="headerlink" title="1. 左旋"></a>1. 左旋</h4><p><font face="宋体">当某个结点的左子结点的链接是黑色的，而其右子结点是红色的（不满足定义中的第一个条件）则需要对其进行左旋操作。</font><br><font face="宋体"><br>左旋的过程（前提条件当前结点为h，而其右子结点为x）：</font></p>
<ul>
<li><font face="宋体">1. 让x的左子结点成为h的右子结点；</font></li>
<li> <font face="宋体">2. 让h成为x的左子结点；</font></li>
<li> <font face="宋体">3. 让h的color属性成为x的color属性；</font></li>
<li> <font face="宋体">4. 让h的color属性置为红色。</font></li>
</ul>
<p><img src="/2021/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91/1617693263761.png" alt="Alt text"></p>
<h4 id="2-右旋"><a href="#2-右旋" class="headerlink" title="2.右旋"></a>2.右旋</h4><p><font face="宋体">当某个结点的左子结点的链接是红色的，而其左子结点的左子结点也是红色的（不满足定义中的第二个条件）则需要对其进行右旋操作。</font><br><font face="宋体"><br>右旋的过程（前提条件当前结点为h，而其左子结点为x）：</font></p>
<ul>
<li><font face="宋体">1. 让x的右子结点成为h的左子结点；</font></li>
<li> <font face="宋体">2. 让h成为x的右子结点；</font></li>
<li> <font face="宋体">3. 让h的color属性成为x的color属性；</font></li>
<li> <font face="宋体">4. 让h的color属性置为红色。</font><br><img src="/2021/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91/1617693449983.png" alt="Alt text"></li>
</ul>
<h4 id="3-颜色反转"><a href="#3-颜色反转" class="headerlink" title="3.颜色反转"></a>3.颜色反转</h4><p><font face="宋体">当某个结点的左子结点的链接是红色的，而其右子结点也是红色的，则需要将其两个子结点的链接设置为黑色，而其父链接设置为红色。</font><br><img src="/2021/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91/1617693520319.png" alt="Alt text"></p>
<h3 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">红黑树的CPP实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Key key;</span><br><span class="line">	Value value;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//记录左子结点和右子结点</span></span><br><span class="line">	Node* left;</span><br><span class="line">	Node* right;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> color;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Node</span>(Key key, Value value, Node* left, Node* right, <span class="keyword">bool</span> color) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;key = key;</span><br><span class="line">		<span class="keyword">this</span>-&gt;value = value;</span><br><span class="line">		<span class="keyword">this</span>-&gt;left = left;</span><br><span class="line">		<span class="keyword">this</span>-&gt;right = right;</span><br><span class="line">		<span class="keyword">this</span>-&gt;color = color;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="keyword">class</span> <span class="title">Value</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedBlackTree</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Node&lt;Key,Value&gt;* root;</span><br><span class="line">	<span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//红黑树标识： 红 RED true， 黑 BLACK false</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">bool</span> RED = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">bool</span> BLACK = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">RedBlackTree</span>(Key key, Value value, Node&lt;Key, Value&gt;* left, Node&lt;Key, Value&gt;* right, <span class="keyword">bool</span> color) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;root = <span class="keyword">new</span> Node&lt;Key, Value&gt;(key,value,left,right,color);</span><br><span class="line">		<span class="keyword">this</span>-&gt;N = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	~<span class="built_in">RedBlackTree</span>() &#123;</span><br><span class="line">		<span class="keyword">delete</span> root;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取树中元素的个数</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> N;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//判断当前结点的父指向链接是否为红色</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">isRed</span><span class="params">(Node&lt;Key, Value&gt;* x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (x == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> x-&gt;color == RED;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//左旋操作</span></span><br><span class="line">	Node&lt;Key, Value&gt;* rotateLeft(Node&lt;Key, Value&gt;* h) &#123;</span><br><span class="line">		<span class="comment">//获取h结点的右子结点x</span></span><br><span class="line">		Node&lt;Key, Value&gt;* x = h-&gt;right;</span><br><span class="line">		<span class="comment">//让x结点的左子结点成为h结点的右子结点</span></span><br><span class="line">		h-&gt;right = x-&gt;left;</span><br><span class="line">		<span class="comment">//让h结点成为x的左子结点</span></span><br><span class="line">		x-&gt;left = h;</span><br><span class="line">		<span class="comment">//让x结点的color属性等于h结点的color属性</span></span><br><span class="line">		x-&gt;color = h-&gt;color;</span><br><span class="line">		<span class="comment">//让h结点的color成为红色</span></span><br><span class="line">		h-&gt;color = RED;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//右旋操作</span></span><br><span class="line">	Node&lt;Key,Value&gt;* rotateRight(Node&lt;Key, Value&gt;* h) &#123;</span><br><span class="line">		<span class="comment">//获取h结点的左子结点x</span></span><br><span class="line">		Node&lt;Key, Value&gt;* x = h-&gt;left;</span><br><span class="line">		<span class="comment">//让x的右子结点成为h的左子结点</span></span><br><span class="line">		h-&gt;left = x-&gt;right;</span><br><span class="line">		<span class="comment">//让h成为x的右子结点</span></span><br><span class="line">		x-&gt;right = h;</span><br><span class="line">		<span class="comment">//让x结点的color属性等于h结点的color属性</span></span><br><span class="line">		x-&gt;color = h-&gt;color;</span><br><span class="line">		<span class="comment">//让h结点的color成为红色</span></span><br><span class="line">		h-&gt;color = RED;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//颜色变换</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">flipColors</span><span class="params">(Node&lt;Key, Value&gt;* h)</span> </span>&#123;</span><br><span class="line">		h-&gt;color = RED;</span><br><span class="line"></span><br><span class="line">		h-&gt;left-&gt;color = BLACK;</span><br><span class="line">		h-&gt;right-&gt;color = BLACK;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Key key1, Key key2)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> key1 - key2;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在指定的树中完成插入操作，并返回添加元素后新的树</span></span><br><span class="line">	Node&lt;Key, Value&gt;* put(Node&lt;Key, Value&gt;* h, Key key, Value value) &#123;</span><br><span class="line">		<span class="comment">//若h为空，则直接返回一个红色的结点即可</span></span><br><span class="line">		<span class="keyword">if</span> (h == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			N++;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Node&lt;Key, Value&gt;(key, value, <span class="literal">NULL</span>, <span class="literal">NULL</span>, RED);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> cmp = <span class="built_in">compareTo</span>(key, h-&gt;key);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="comment">//继续往左</span></span><br><span class="line">			h-&gt;left = <span class="built_in">put</span>(h-&gt;left, key, value);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="comment">//继续往右</span></span><br><span class="line">			h-&gt;right = <span class="built_in">put</span>(h-&gt;right, key, value);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			h-&gt;value = value;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//进行左旋</span></span><br><span class="line">		<span class="comment">//当当前结点的左子结点为黑色，而右子结点为红色</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">isRed</span>(h-&gt;right) &amp;&amp; !<span class="built_in">isRed</span>(h-&gt;left)) &#123;</span><br><span class="line">			h = <span class="built_in">rotateLeft</span>(h);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//进行右旋</span></span><br><span class="line">		<span class="comment">//当当前结点的左子结点为红色，而其左子结点的左子结点也为红色</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">isRed</span>(h-&gt;left) &amp;&amp; <span class="built_in">isRed</span>(h-&gt;left-&gt;left)) &#123;</span><br><span class="line">			h = <span class="built_in">rotateRight</span>(h);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//颜色反转：当前结点的左子结点和右子结点都为红色</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">isRed</span>(h-&gt;left) &amp;&amp; <span class="built_in">isRed</span>(h-&gt;right)) &#123;</span><br><span class="line">			<span class="built_in">flipColors</span>(h);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> h;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在整棵树上完成插入操作</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value value)</span></span>&#123;</span><br><span class="line">		root = <span class="built_in">put</span>(root, key, value);</span><br><span class="line">		<span class="comment">//根结点的颜色永远是黑色</span></span><br><span class="line">		root-&gt;color = BLACK;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//从指定的树x中查找key对应的值</span></span><br><span class="line">	<span class="function">Value <span class="title">get</span><span class="params">(Node&lt;Key, Value&gt;* x, Key key)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (x == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="comment">//C6387</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//比较x结点的键和key的大小</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> cmp = <span class="built_in">compareTo</span>(key, x-&gt;key);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">get</span>(x-&gt;right, key);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">get</span>(x-&gt;left, key);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> x-&gt;value;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//根据key从书中找到对应的值</span></span><br><span class="line">	<span class="function">Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">get</span>(root, key);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	RedBlackTree&lt;int, string&gt; tree(0,&quot;&quot;,NULL,NULL,true);</span><br><span class="line">	tree.<span class="built_in">put</span>(<span class="number">1</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">	tree.<span class="built_in">put</span>(<span class="number">2</span>, <span class="string">&quot;Tim&quot;</span>);</span><br><span class="line">	tree.<span class="built_in">put</span>(<span class="number">3</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">	tree.<span class="built_in">put</span>(<span class="number">4</span>, <span class="string">&quot;Smith&quot;</span>);</span><br><span class="line"></span><br><span class="line">	string str1 = tree.<span class="built_in">get</span>(<span class="number">2</span>);</span><br><span class="line">	cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	string str2 = tree.<span class="built_in">get</span>(<span class="number">2</span>);</span><br><span class="line">	cout &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	string str3 = tree.<span class="built_in">get</span>(<span class="number">3</span>);</span><br><span class="line">	cout &lt;&lt; str3&lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="执行结果如下："><a href="#执行结果如下：" class="headerlink" title="执行结果如下："></a>执行结果如下：</h4><p><img src="/2021/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91/1617693579337.png" alt="Alt text"></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
</search>
